#!/usr/bin/env perl

#-------------------------------------------------------------------------------
# NAME run-pfsigcleave
# PURPOSE: run sigcleave and load into unison
# USAGE: run-pfsigcleave [pseq_ids]
#
# $Id: run-pfsigcleave,v 1.3 2003/10/07 18:59:37 rkh Exp $
#-------------------------------------------------------------------------------

use Unison;
use Bio::SeqIO;
use Bio::PrimarySeq;
use IPC::Open2;
use IO::Handle;
use IO::Pipe;
use Env qw(@PATH);
use Getopt::Long;
use Genentech::Sigcleave;

my %opts = 
  (
   debug => 0
  );
GetOptions( \%opts,
			'debug|d+' )
  || die("$0: usage\n");


unshift(@PATH, '/usr/local/tools/bin/');
$ENV{DEBUG}=0;

my $run_id = 5;								# hardwired for now
my $temp_in_fn =  "/tmp/run-pfsigcleave-$$.fa";
my $temp_out_fn = "/tmp/run-pfsigcleave-$$.out";
my $sc = new Genentech::Sigcleave;


sub run1($$$);

my $u = new Unison;

my @cmd = ('sigcleave', split(' ',$u->run_commandline_by_run_id( $run_id )),"-outfile $temp_out_fn",$temp_in_fn,'2>/dev/null');
print(STDERR "# running with @cmd\n");

my $sth = $u->prepare( 'insert into pfsigcleave(pseq_id,start,stop,score,run_id) values (?,?,?,?,?,?)' );

#my @list = Unison::utils::range_to_enum(@ARGV);
my @list = @ARGV;
for(my $i=0; $i<=$#list; $i++) {
  my $pseq_id = $list[$i];

  my $seq = $u->get_sequence_by_pseq_id( $pseq_id );
  if (not defined $seq) {
	warn("$0: Unison:$pseq_id doesn't exist\n");
	return;
  }

  printf(STDERR "\rloading Unison:%-8s (%5d AA); %4d/%4d %3d%% complete...",
		 $pseq_id, length($seq), ($i+1), ($#list+1), ($i+1)/($#list+1)*100 );
  run1( $u, $pseq_id, $seq );
}
print(STDERR "\n");

exit(0);




sub run1($$$) {
  my $u = shift;
  my $pseq_id = shift;
  my $seq = shift;

  # write temp sequence
  my $seqio = new Bio::SeqIO( -format => 'fasta',
							  -file => ">$temp_in_fn" );
  $seqio->write_seq( new Bio::PrimarySeq(-seq => $seq,
										 -id  => "Unison:$pseq_id") );
  $seqio->close();

  # run sigcleave
	system(join(' ',@cmd));
  #my $rer = IO::Pipe->new->reader(join( ' ', @cmd, '-outfile', $temp_out_fn,
										#$temp_in_fn, '2>/dev/null') );

  # read sigcleave
	my ($score,$site) = $sc->getCleavageSite( 'file' => $temp_out_fn );

printf("site:%d, score: %f\n",$site,$score);
	#$sth->execute($pseq_id,1,$site-1,$score,$run_id);
	#$u->last_run_update($pseq_id,$run_id);
}
