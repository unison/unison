#!/usr/bin/env perl

#-------------------------------------------------------------------------------
# NAME run-pfsigcleave
# PURPOSE: run sigcleave and load results into unison
# USAGE: run-pfsigcleave [pseq_ids]
#
# $Id: run-pfsigcleave,v 1.5 2003/10/20 23:11:19 cavs Exp $
#-------------------------------------------------------------------------------

use Unison;
use Bio::SeqIO;
use Bio::PrimarySeq;
use IPC::Open2;
use IO::Handle;
use IO::Pipe;
use Env qw(@PATH);
use Getopt::Long;
use Genentech::EmbossSimple;
use warnings;
use strict;

my %opts = 
  (
   debug => 0
  );
GetOptions( \%opts,
      'debug|d+' )
  || die("$0: usage\n");


$ENV{DEBUG}=1;

# cutoffs:
my $score_cutoff = '3.5';
my $end_cutoff = '50';

my $params_id = 5;                # hardwired for now
my $temp_in_fn =  "/tmp/run-pfsigcleave-$$.fa";
my $temp_out_fn = "/tmp/run-pfsigcleave-$$.out";

sub run1($$$);

my $u = new Unison;

my @cmd = ('sigcleave', split(' ',$u->run_commandline_by_params_id( $params_id )),"-outfile $temp_out_fn",$temp_in_fn,'2>/dev/null');
my $seqio = new Bio::SeqIO( -format => 'fasta', -file => ">$temp_in_fn" );
my $sth = $u->prepare( 'insert into pfsigcleave(pseq_id,start,stop,score,params_id) values (?,?,?,?,?)' );

#my @list = Unison::utils::range_to_enum(@ARGV);
my @list = @ARGV;
for(my $i=0; $i<=$#list; $i++) {
  my $pseq_id = $list[$i];

  my $seq = $u->get_sequence_by_pseq_id( $pseq_id );
  printf(STDOUT "retrieving Unison:%-8s (%5d AA) %4d/%4d %3d%% complete...\n",
     $pseq_id, length($seq), ($i+1), ($#list+1), ($i+1)/($#list+1)*100 );
  if (not defined $seq) {
    warn("$0: Unison:$pseq_id doesn't exist\n");
    return;
  }
  $seqio->write_seq( new Bio::PrimarySeq(-seq => $seq, -id  => "Unison:$pseq_id") );
}
$seqio->close();

# run sigcleave
system(join(' ',@cmd));
#my $rer = IO::Pipe->new->reader(join( ' ', @cmd, '-outfile', 'stdout',
  #$temp_in_fn, '2>/dev/null') );

my $parser = new Genentech::EmbossSimple( 'file' => $temp_out_fn );

RESULT: while(my $r = $parser->next_result) {
  foreach my $ref ( @{$r} ) {
    my $pseq_id = $ref->{'Name'};
    my $score = $ref->{'Score'};
    my $start = $ref->{'Start'};
    my $end = $ref->{'End'};

    next if $score < $score_cutoff;
    next if $end > $end_cutoff;

    printf(STDOUT "\rloading Unison:%-8s (score: %.2f, start: %d, end: %d)\n",
       $pseq_id,$score,$start,$end);
    $sth->execute($pseq_id,$start,$end,$score,$params_id);
    $u->last_run_update($pseq_id,$params_id);

    next RESULT;
  }
}

print(STDOUT "\n");

unlink $temp_in_fn, $temp_out_fn unless $ENV{'DEBUG'};
exit(0);
