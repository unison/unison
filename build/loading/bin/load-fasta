#!/usr/bin/env perl
# load fasta sequences into unison
# $ load-fasta -o origin <fastafile


use strict;
use warnings;
use Bio::SeqIO;
use Data::Dumper;
use Digest::MD5  qw(md5_hex);
use Getopt::Long qw(:config gnu_getopt);
use IO::File;
use Unison;

my %opts = (origin => undef,
			filelist => undef,
			'start-after' => undef,
			'sql-only' => 0,
			'include-subex' => 0);
GetOptions( \%opts,
			'origin|o=s',
			'start-after|startafter|A=s',
			'sql-only|sqlonly',
			'incl-subex|inclsubex' )
  || die("$0: bad usage\n");
(defined $opts{origin})
  || die("$0: --origin (-o) is mandatory\n");



select(STDERR); $|++;
select(STDOUT); $|++;

# whee... globals
my $u = new Unison;
my $porigin_id = $u->porigin_si_porigin_id($opts{origin});
my %alias;
my %md5;


print(STDERR '# $Id: load-fasta,v 1.22 2004/02/24 19:20:57 rkh Exp $ ',"\n");
print(STDERR "# loading sequences into $opts{origin} (porigin_id=$porigin_id)\n");




# append filenames in the filelist file to @ARGV
if (defined $opts{filelist}) {
  my $fh = new IO::File;
  $fh->open("<$opts{filelist}")
	|| die("$opts{filelist}: $!\n");
  while( my $fn = <$fh> ) {
	push(@ARGV,$fn);
  }
  $fh->close();
}

# if ARGV is empty so far, there was no filelist and no files
# on the command line => read from stdin
if (not @ARGV) {
  push(@ARGV,'-');
}


my ($nseen,$nskipped,$nadded) = (0,0,0);
while( defined (my $fn = shift) ) {
  my $in  = Bio::SeqIO->new('-format' => 'Fasta',
							'-file' => $fn );
  if (not defined $in) {
	die("$fn: $!\n");
  }
  process_stream($in);
}

printf(STDERR "# before: %d extant aliases, %d extant md5s\n"
	   . "# %d sequences scanned; %d skipped; %d added or extant\n",
	   scalar keys %alias, scalar keys %md5, 
	   $nseen, $nskipped, $nadded);

print( "last_updated = ", $u->porigin_last_updated( $porigin_id,1 ) );

exit(0);



# ________________________________________________________________________ #
# ________________________________________________________________________ #

sub process_stream {
  my $in = shift;
  while( my $bs = $in->next_seq() ) {
	process_seq($bs);
  }
  return;
}

sub process_seq  {
  my $bs = shift;
  my $id = $bs->display_id();
  my $seq = $bs->seq();

  if (not defined $seq)	{
	warn("$id: sequence not defined\n"); 
	return;
  }

  my $descr = $bs->desc();
  my $oseq = $seq;
  $seq = uc($seq); $seq =~ s/[^-\*\?A-Z]//g;
  my $md5 = md5_hex($seq);
  $nseen++;

  # description reformatting
  $descr = '' unless defined $descr;
  $descr =~ s/\s{2,}/ /g;
  $descr =~ s/^\s+//;
  $descr =~ s/\s+$//;
  if ($opts{origin} =~ m/spdi/i) {
	$descr =~ s/\[(?:min|full)\]\s+//;
	$descr =~ s/\# converted.+//;
  }

  # skip sequences in various conditions
  my $skip;
  if ($id !~ m/\w/)	{
	$skip = "doesn't look like a valid sequence id"; 
  } elsif (defined $opts{'start-after'})	{
	$skip = "haven't reached $opts{'start-after'} yet";
	undef $opts{'start-after'} if ($id eq $opts{'start-after'});
  } elsif (%alias and exists $alias{$id}) {
	$skip = 'extant alias';
  } elsif (length($seq) == 0) {
	$skip = "zero-length";
  } elsif (!$opts{'incl-subex'} and $descr =~ m%/type=(\w+)% and $1 ne 'gene') {
	$skip = "non-gene genescan transcript";
  }
  if (defined $skip) {
	warn("# skipping $id: $skip ($descr)\n");
	$nskipped++;
	return;
  }

  # @ids is the SET of ids to which we'll link this sequence
  my @ids = ();

  if ($opts{origin} =~ m/GenenGenes/i) {
	my %ids;
	# NO UNQs in database -- not unique!
	# $ids{$1}++ if $descr =~ s/(UNQ\d+)\s+//;
	$ids{$1}++ if $descr =~ s/(PRO\d+)\s+//;
	$ids{$1}++ if $descr =~ s/(DNA\d+)\s+//;
	$ids{$id}++;
	@ids = sort keys %ids;
	#warn("! $id: GenenGenes sequence didn't match 2 identifiers (@ids)\n") unless $#ids==1;
  } else {
	@ids = ( $id );
  }

  if ($opts{'sql-only'}) {
	printf("insert into pseq (seq,len) values ('$seq',%d);\n",
		   length($seq)); return 1;
  }

  # select/insert sequences, then link aliases
  my $pseq_id;
  my $frommd5='';
  if (%md5 and exists $md5{ $md5 })	{
	$pseq_id = $md5{ $md5 };
	$frommd5='*';
  } else {
	$pseq_id = $u->pseq_si_pseq_id( $seq );
	$md5{ $md5 } = $pseq_id;
  }

  if (not defined $pseq_id)	{
	warn("! failed to add $id");
	return 0;
  }

  foreach my $upd_id (@ids)	{
	$u->add_palias($pseq_id,$porigin_id,$upd_id,$descr);
  }

  printf(STDERR "## added pseq_id=$pseq_id$frommd5, len=%d, aliases={@ids}, descr=%s\n",
		length($seq), $descr);
  $nadded++;

  return;
}
