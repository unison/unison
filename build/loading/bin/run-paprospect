#!/usr/bin/env perl
# run p2 and insert into Unison

use warnings;
use strict;

select STDERR; $|++;
select STDOUT; $|++;

use Unison;
use Prospect2::Options;
use Prospect2::LocalClient;
use Getopt::Long qw(:config gnu_getopt);
use Data::Dumper;

my %uf =
  (
   'raw' => 'raw_score',
   'svm' => 'svm_score',
   'zscore' => 'z_score',
   'mutation' => 'mut',
   'singleton' => 'sing',
   'pairwise' => 'pair',
   'ssfit' => 'ssfit',
   'gap' => 'gap',
   'nident' => 'nident',
   'nalign' => 'nalign',
   'rgyr' => 'rgyr',
  );


my %options;
GetOptions(\%options,
		   @Unison::options,
		   'p2params_id|p=i',
		   #'update|u+'						# force update (delete rows before insert)
		  )
  || die("$0: bad usage\n");

my $u = new Unison;
my $po = $u->get_p2options_by_p2params_id($options{p2params_id});
# FIX: make this a command line option
$po->{tfile} = '/home/rkh/prospect/tfiles/all';
my $pc = new Prospect2::LocalClient( options=>$po );


while( my $pseq_id = shift )
  {
  my $seq = $u->get_sequence_by_pseq_id( $pseq_id );
  my ($t) = $pc->thread( $seq );
  print(STDERR "done threading...\n") if $ENV{DEBUG};
  my ($h,@f) = $pc->summary( $seq );
  print(STDERR "done summary...\n") if $ENV{DEBUG};
  foreach my $modn (keys %$h)
	{
    insert1($u,$pseq_id,$options{p2params_id},$modn,$h->{$modn},@f);
	}
  }



sub insert1
  {
  my ($u,$pseq_id,$p2params_id,$modn,$ar,@f) = @_;
  my %fi = map { $f[$_] => $_ } 0..$#f;
  my (@uf) = keys %uf;
  my (@i) = map { $fi{$uf{$_}} } @uf;	  # array indicies in insert order
  my @af = ('pseq_id','p2params_id','pmodel_id',@uf);
  my $pmodel_id = pmodel_id_lookup($u,$modn);
  my $sql = 'insert into p2thread ('
	 . join(',',map { "\"$_\"" } @af)
	 . ') values ('
	 . join(',',map { '?' } @af)
	 . ')' ;
  my $sth = $u->prepare_cached($sql);
  my @v = ($pseq_id, $p2params_id, $pmodel_id, @$ar[@i]);
  $sth->execute( @v );
  $sth->finish();
  }


my %pmodel_id;
sub pmodel_id_lookup
  {
  my ($u,$modn) = @_;
  if (not exists $pmodel_id{$modn})
	{
	my $sth = $u->prepare_cached('select pmodel_id from p2template where name=?');
	$sth->execute($modn);
	($pmodel_id{$modn}) = $sth->fetchrow_array();
	$sth->finish();
	}
  return $pmodel_id{$modn};
  }
