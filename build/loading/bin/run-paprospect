#!/usr/bin/env perl
# run-paprospect -- run and insert prospect threads into Unison
# arguments: 
#   --params_id|-p <params_id>: params_id for loading (required)
#   --tfile|-t <template file>: file containing a list of templates (optional)
#   --update: force update (i.e. delete cooresponding rows in unison before inserting) (optional)
# usage: run-p2 [psql options] --params_id <params_id> [--tfile <template file>] [--update]
#
# $Id: run-paprospect,v 1.22 2007/01/19 01:14:20 mukhyala Exp $
#-------------------------------------------------------------------------------

use warnings;
use strict;

use Unison;
use Unison::SQL;
use Unison::paprospect;
use Unison::run;

use Bio::Prospect::File;
use Bio::Prospect::ThreadSummary;
use Bio::Prospect::Exceptions;
use Bio::SeqIO;
use Getopt::Long qw(:config gnu_getopt);
use Data::Dumper;
use Error qw(:try);
use File::Temp qw/tempfile/;


my %opts = 
  (
   'debug' => 0,
   'dry-run' => 0,
   'run_id' => undef,
   'params_id' => undef,
   'pmodelset_id' => undef,
   'templates' => undef,					# template names
   'update' => 0,							# try update before insert
   'verbose' => 1,
  );
GetOptions
  (
   \%opts,
   'debug+',
   'run_id|r=i',
   'update',
   'verbose|v',
   'dry-run|n'
  )
  or die("$0: bad usage\n");

my $u = new Unison();

if (defined $opts{params_id} || (defined $opts{pmodelset_id})) {
    die("$0: use run_id (-r),  may not specify params_id/pmodelset_id\n");
}

($opts{params_id},$opts{pmodelset_id}) = (defined $opts{run_id} ? $u->get_run_params_id_pmodelset_id($opts{run_id}) :  die("$0: run not defined (-r)\n"));

(defined $opts{params_id})
  || die("$0: could not fetch parameters from run_id $opts{run_id}\n");
(defined $opts{pmodelset_id})
  || die("$0: could not fetch modelset from run_id $opts{run_id}\n");

(defined $ENV{UNISON_HOME})
  || die("$0: UNISON_HOME is not set\n");

$opts{modelfile} = "$ENV{UNISON_HOME}/".$u->selectrow_array("select data_url from pmodelset where pmodelset_id=$opts{pmodelset_id}") || die ("$0: Could not fetch modelfile for modelset=$opts{pmodelset_id}\n");
(-e $opts{modelfile} and -f $opts{modelfile})
  || die("$0: $opts{modelfile} doesn't exist select data_url from pmodelset where pmodelset_id=$opts{pmodelset_id}\n");

if ($opts{debug}) {
  select STDERR; $|++;
  select STDOUT; $|++;
  print Dumper(\%opts);
}

my @pseq_ids = map {eval "$_"} @ARGV;
my $N = $#pseq_ids+1;

my @cl = (@{$u->selectall_arrayref("select commandline from params where params_id=$opts{params_id}")->[0]});
push(@cl, '--tfile ', $opts{modelfile});


PSEQ_ID: while( my $pseq_id = shift(@pseq_ids) ) {
  my $leader = "\rUnison:$pseq_id";
  print(STDERR $leader);

  my $ran_on = $u->get_run_timestamp($pseq_id,$opts{run_id});
  if (defined $ran_on and not $opts{update}) {
    if (not $opts{update}) {
      print(STDERR "$leader: run with these options on $ran_on; skipping\n");
      next PSEQ_ID;
    }
    print(STDERR "$leader: run with these options on $ran_on; running anyway\n");
  }

  my $seq = $u->get_sequence_by_pseq_id( $pseq_id );
  $leader .= " (" . length($seq) . " AA)";

  my ($seqfh,$seqfn) = File::Temp::tempfile( UNLINK => 1,SUFFIX => '.fasta' );
  my $so = new Bio::SeqIO( -format => 'fasta',
			   -file => ">$seqfn" )
    || die("! couldn't open $seqfn for writing\n");
  $so->write_seq( new Bio::PrimarySeq( -seq => $seq,
				       -id => "Unison:$pseq_id" ) );
  my @cmd = @cl;
  my (@summaries);


  print(STDERR "$leader: threading...");
  push(@cmd,$seqfn);
  print STDERR "@cmd\n" if($opts{verbose});
  system( join " ",@cmd );
  $? && die("FAILED: @cmd: $!\n");
  (@summaries) = xml2threadsummaries( "$seqfn.xml");

  if ($opts{'dry-run'}) {
	print(STDERR "done\n");
	next;
  }
  $u->begin_work();
  for( my $i=0; $i<=$#summaries; $i++) {
	my $ts = $summaries[$i];
	printf(STDERR "$leader: loading %8s (%4d/%4d %3d%%)...", 
	       $ts->tname(), ($i+1), ($#summaries+1), ($i+1)/($#summaries+1)*100 );
	$u->delete_thread($pseq_id,$opts{params_id},$ts) if $opts{update};
	try {
	  $u->insert_thread($pseq_id,$opts{params_id},$ts);
	} catch Unison::Exception::DBIError with {
	  print(STDERR "\n$_[0]");
	};
  }

  my $z = $u->upd_run_history($pseq_id,$opts{run_id});

  print(STDERR "done; history tickled ($z)\n");
  $u->commit();
}

sub xml2threadsummaries {
  my $xfn = shift || die "xml2threads expects an xml file\n";

  my $pf = new Bio::Prospect::File;
  $pf->open( "<$xfn" ) || die("could not open $xfn\n");
  my @ts;
  while( my $t = $pf->next_thread() ) {
    push @ts, new Bio::Prospect::ThreadSummary( $t );;
  }
  return( @ts );
}

############################################################################
# $Log: run-paprospect,v $
# Revision 1.22  2007/01/19 01:14:20  mukhyala
# load paprospect module needed for loading
#
# Revision 1.21  2006/06/26 18:05:08  rkh
# porigin_id -> origin_id rename
#
# Revision 1.20  2006/03/16 19:06:56  mukhyala
# changes for use of unison/bin/gne_prospect
#
# Revision 1.19  2005/10/09 09:39:31  rkh
# s/prospect2/prospect/
#
# Revision 1.18  2005/05/11 21:53:41  rkh
# periodic sync
#
# Revision 1.17  2005/03/22 05:44:23  rkh
# updated for /gne/ and linux-2.6
#
# Revision 1.16  2004/12/24 00:09:46  rkh
# 2004 sync
#
# Revision 1.15  2004/06/25 00:20:27  rkh
# periodic sync
#
# Revision 1.14  2004/06/04 00:04:07  rkh
# periodic sync
#
# Revision 1.13  2004/04/02 00:34:05  rkh
# periodic sync
#
# Revision 1.12  2004/02/25 20:47:12  rkh
# added exception handling
#
# Revision 1.11  2004/02/24 21:49:08  rkh
# * added ran_on; check IMPORTANT NOTE for clarification
#
# Revision 1.10  2004/02/24 19:20:57  rkh
# periodic sync
#
# Revision 1.9  2004/01/08 02:17:38  rkh
# sync with DEV
#
# Revision 1.8  2003/10/28 22:29:05  rkh
# * new Unison doesn't require special handling for PGPASSWORD (see U::DBI)
#
# Revision 1.6  2003/06/19 00:14:36  rkh
# * reworked options to use hashes
# * set $po->{tfile} only when $opt{tfile} is set
# * pretty print progress
#
