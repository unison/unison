#!/usr/bin/env perl

#-------------------------------------------------------------------------------
# NAME run-pfsignalp
# PURPOSE: run sigcleave and load results into unison
# USAGE: run-pfsignalp [pseq_ids]
#
# $Id: run-pfsignalp,v 1.9 2005/08/20 00:00:27 rkh Exp $
#-------------------------------------------------------------------------------

use strict;
use warnings;
use Unison;
use IO::File;
use Bio::SeqIO;
use Bio::PrimarySeq;
use Getopt::Long qw(:config gnu_getopt);
use File::Temp qw(tempdir);


my %opts = 
  (
   debug => 0,
   params_id => undef,
   verbose => 0,
  );
GetOptions( \%opts,
			'debug|d+',
			'force|f+',
			'params_id|p=i',
			'verbose|v+',
		  )
  || die("$0: usage\n");

(defined $opts{params_id})
  || die("$0: parameters not defined (-p)\n");

my $dir = tempdir( 'run-pfsignalp-XXXXXX', CLEANUP => 1, TMPDIR => 1 );
my $temp_in_fn =  "$dir/seqs.fa";
my $temp_out_fn = "$dir/seqs.signalp";

# signalp barfs on really small and large seqs
my $len_lower_cutoff = '50';
my $len_upper_cutoff = '3000';

# signalp also barfs on lot'sa sequences and/or long sequence files -
# limit number of sequences to 250
my $max_seq_cnt = 250;
die( "Signalp barfs on many seqs and large seq files.\n" .
	"Therfore, run-pfsignalp allows only $max_seq_cnt seqs at a time\n" ) if
	( $#ARGV >  $max_seq_cnt );

my $u = new Unison;

my $cmd = $u->run_commandline_by_params_id( $opts{params_id} ) . " $temp_in_fn 1>$temp_out_fn";
my $seqio = new Bio::SeqIO( -format => 'fasta', -file => ">$temp_in_fn" );
my $sthnn = $u->prepare( 'insert into pfsignalpnn(pseq_id,start,stop,d_score,signal_peptide,params_id) values (?,?,?,?,?,?)' );
my $sthhmm = $u->prepare( 'insert into pfsignalphmm(pseq_id,start,stop,sig_peptide_prob,sig_anchor_prob,max_cleavage_prob,pfsignalphmm_pred_id,params_id) values (?,?,?,?,?,?,pfsignalphmm_pred(?),?)' );
my %run_me;  # track pseqs to run

my (@pseq_ids) = @ARGV ? map {eval "$_"} @ARGV : map { chomp;$_ } <>;

PSEQ_ID: foreach my $pseq_id ( @pseq_ids ) {

  my $ran_on = $u->get_run_timestamp($pseq_id,$opts{params_id},undef,undef);
  if (defined $ran_on and not $opts{update}) {
    print(STDERR "Unison:$pseq_id: run with these options on $ran_on; skipping\n");
    next PSEQ_ID;
  }
  $run_me{ $pseq_id }++;

  my $seq = $u->get_sequence_by_pseq_id( $pseq_id );
  if (not defined $seq) {
    warn("$0: Unison:$pseq_id doesn't exist\n");
    return;
  } elsif ((length($seq) < $len_lower_cutoff) || (length($seq) >  $len_upper_cutoff)) {
    printf(STDERR "skipping Unison:%s since its len (%d) not in the range of [%d .. %d]\n",
		   $pseq_id, length($seq), $len_lower_cutoff , $len_upper_cutoff);
    next;
  }

  $seqio->write_seq( new Bio::PrimarySeq(-seq => $seq, -id  => "Unison:$pseq_id") );
}
$seqio->close();

# run signalp
if ( scalar(keys %run_me) > 0 ) {

  system($cmd) == 0
	or die("$cmd failed: $?\n");

  my $fp = new IO::File $temp_out_fn;
  local $/='----------------------------------------------------------------------';
  while(<$fp>){
    next if m/SignalP 3.0 predictions/;
    if (my($id,$dpos,$dprob,$dcutoff,$dcall,$pred,$spp,$sap,$mcsp,$hmme) = m/>(\S+).+\s+D\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+).+Prediction:\s+(\D+).+Signal peptide probability:\s+(\S+)\s+Signal anchor probability:\s+(\S+)\s+Max cleavage site probability:\s+(\S+) between pos. (\S+) and/sm) {
      $id =~ m/^Unison:(\d+)/;
      my $pseq_id = $1;
      my ($nn_start,$nn_end) = split/-/,$dpos,2;
      my $speptide = ($dcall eq 'YES' ? 't' : 'n');
      $sthnn->execute($pseq_id,$nn_start,$nn_end,$dprob,$speptide,$opts{params_id});
      $sthhmm->execute($pseq_id,'1',$hmme,$spp,$sap,$mcsp,$pred,$opts{params_id});

      # delete this pseq_id from the run_me hash and then update
      # the run history table.  any pseqs left in %run_me are pseqs
      # that signalp'd was run on but had no results.  we'll update
      # the run_history table below for those fellas.
      delete $run_me{ $pseq_id };
      $u->upd_run_history($pseq_id,$opts{params_id},undef,undef);
	  printf(STDERR "loaded signalp results for Unison:$pseq_id\n");
	  if ($opts{verbose}) {
		printf(STDERR "   NN:  sig_pep_prob: %.2f, cleavage_site: %d\n",
			   $pseq_id,$dprob,$nn_end);
		printf(STDERR "  HMM: sig_pep_prob: %.2f, sig_anchor_prob: %.2f, cleavage_site: %d, max_cleavage_prob: %.2f\n",
			   $pseq_id,$spp,$sap,$hmme,$mcsp);
	  }
    } else {
      die("missed $_");
    }
  }
}

# update run history for the seqs that were signalp'd but had no results
# (the above block of code parses the signalp results and updates the
# run history for those seqs with results).
foreach my $pseq_id ( keys %run_me ) {
  $u->upd_run_history($pseq_id,$opts{params_id},undef,undef);
}

unlink $temp_in_fn, $temp_out_fn unless $ENV{'DEBUG'};

exit(0);
