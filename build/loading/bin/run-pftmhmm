#!/usr/bin/perl
# $Id: run-pftmhmm,v 1.3 2005/11/18 04:24:20 rkh Exp $

use strict;
use warnings;

use Bio::SeqIO;
use Unison;
use Unison::Exceptions;
use File::Temp qw/tempfile/;
use IO::Pipe;
use Unison::Utilities::Loading qw(fetch_sequences);
use Getopt::Long qw(:config gnu_getopt);

sub parse_tmhmm_short($);


my %opts = 
  (
   debug     => 0,
   params_id => undef,
   verbose   => 0,
   sql       => 0,
   'seqs-per-run' => 50,
   'max-length' => 3000,
  );
GetOptions( \%opts,
			'debug|d+',
			'params_id|p=i',
			'sql',
			'update',
			'verbose!',
		  )
  || die("$0: usage\n");

(defined $opts{params_id})
  || die( "$0: --params_id|-p parameter missing\n" );

my $temproot = "/tmp/run-pahmm-$$";
my $seqfn = "$temproot.fa";

my $u = new Unison( dbname=>'csb-dev', username=>'loader' );

die "$0: tmhmm is not in your PATH\n" if(not `tmhmm`);

my $cmdline = $u->run_commandline_by_params_id($opts{params_id});
my @cmd = (split(' ',$cmdline),$seqfn);

my $sql = 'insert into pftmhmm (params_id,pseq_id,start,stop,type) values (?,?,?,?,?)';
my $sth = $u->prepare( $sql );



@ARGV = map {chomp;$_} <> unless @ARGV;
@ARGV = map {eval "$_"} @ARGV;

while (@ARGV) {
  my (@pseq_ids) = splice(@ARGV,0,$opts{'seqs-per-run'});

  my $nseq = fetch_sequences($u,$seqfn,\@pseq_ids,\%opts);
  next if ($nseq == 0);

  my $tmhmmpipe = new IO::Pipe;
  $tmhmmpipe->reader( @cmd )
	|| die("$0: @cmd: $!\n");

 LINE:
  while( my $line = <$tmhmmpipe> ) {
	my ($pseq_id,@rgns) = parse_tmhmm_short($line);
	my $nTM = 0;
	$u->begin_work;
    try {
	  foreach my $TM (grep {m/\d[MNio]\d/} @rgns) {
		my ($b,$t,$e) = $TM =~ m/(\d+)([MNio])(\d+)/;
		$sth->execute($opts{params_id},$pseq_id,$b,$e,$t);
		$nTM++ if ($t eq 'M' or $t eq 'N');
	  }
    } catch Unison::Exception with {
	  my $e = $_[0];
	  die($e) if ("$e" !~ m/duplicate key/);
	  $u->rollback();
	  warn("Unison:$pseq_id: $e");
	  goto LINE;
    };
	my $z = $u->upd_run_history($pseq_id,$opts{params_id},undef,undef);
	print("Unison:$pseq_id: $nTM TMs; $z\n");
	$u->commit;
  }

  $tmhmmpipe->close();
}


exit(0);


############################################################################
## INTERNAL FUNCTIONS
# examples:
#Unison:8        len=201 ExpAA=0.60      First60=0.60    PredHel=0       Topology=o
#Unison:9        len=178 ExpAA=44.44     First60=21.33   PredHel=2       Topology=i9-31o119-141i
#Unison:10       len=208 ExpAA=35.29     First60=12.47   PredHel=1       Topology=o162-184i

sub parse_tmhmm_short($) {
  my $line = shift;
  my ($pseq_id,$len,$top) = $line =~ m/Unison:(\d+)\s+len=(\d+).+Topology=(\S+)/;
  if (not defined $top) {
	warn("$0: failed to parse purported tmhmm --short output:\n   $line");
  }

  # transform the topology line into a set of contiguous spans
  # eg, i9-31o119-141i -> 1i8,9M31,32o118,119N141,142i208
  $top =~ s/(i)(\d+)-(\d+)(o)/$1.($2-1).",${2}M${3},".($3+1).$4/eg;
  $top =~ s/(o)(\d+)-(\d+)(i)/$1.($2-1).",${2}N${3},".($3+1).$4/eg;
  $top = '1' . $top . $len;

  return ( $pseq_id, split(/,/,$top) );
}
