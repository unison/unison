#! /usr/bin/env perl
#-------------------------------------------------------------------------------
# NAME: load-pmap
# PURPOSE: Parse PMAP psl output for protein-to-genome alignments. load
#          output into Unison.
#
# $Id: load-pmap,v 1.2 2005/11/22 22:33:00 mukhyala Exp $
#-------------------------------------------------------------------------------

use strict;
use warnings;
use Bio::Tools::ProteinToGenomeBlat;
use Getopt::Long;
use Unison;
use Unison::Exceptions;
use Data::Dumper;

my %opts =
  (
   genasm_id => undef,
   pct_ident_cutoff => 80,
   score_cutoff => 80,
   verbose => 0,
   params_id => undef
  );

GetOptions(\%opts,
  'pct_ident_cutoff|i=i',
  'genasm_id|g=i',
  'score_cutoff|s=i',
  'help',
  'verbose|v+',
  'params_id|p=s'
) || usage();

($#ARGV == 0
 and defined $opts{params_id}
 and defined $opts{genasm_id})
  || usage();

die(<<EOT);
$0 is broken. The problem is that the result and hsp loading code leaves
transactions open in some cases, and therefore results in attempts to next
transactions.  (e.g., begin_work twice without intervening commit or
rollback).  This happens /at least/ in the following case:
- begin
- attempt to load one HSP
- ...but fails because of duplicate hsp. TRANSACTION IS STILL OPEN.
- subsequent begin fails
EOT



my $u = new Unison(dbname=>'csb-dev', username=>'loader');
my $aln_sth = $u->prepare( 'select ins_pmap_aln( ?, ?, ?, ?, ?, ?, ?, ?, ? )' );
my $hsp_sth = $u->prepare( 'select ins_pmap_hsp( ?, ?, ?, ?, ?, ?, ?, ?, ? )' );

my $params_id = $u->get_params_id_by_name( $opts{params_id} );
(defined $params_id)
  || die( "Unable to retrieve params_id for name=$opts{params_id}" );

my %updated;				  # pseq_ids that have had run_history updated


my $bio = new Bio::Tools::ProteinToGenomeBlat( -file => $ARGV[0] );
RESULT:
while( my $r = $bio->next_result() ){
  my @pct_ident  = $r->get_tag_values('percent_id');
  my @ident      = $r->get_tag_values('ident');
  my @qgap_cnt   = $r->get_tag_values('qgap_cnt');
  my @qgap_bases = $r->get_tag_values('qgap_bases');
  my @tgap_cnt   = $r->get_tag_values('tgap_cnt');
  my @tgap_bases = $r->get_tag_values('tgap_bases');
  my $pseq_id;

  if ( not defined $r->seq_id ) {
	warn( "ERROR: line $.: result seq_id is undefined; skipping.\n",
		  $_, "\n" );
	next RESULT;
  }

  ($pseq_id) = $r->seq_id =~ m/Unison:(\d+)/;
  if ( not defined $pseq_id ) {
    die( "ERROR: can't parse pseq_id from seq_id=",$r->seq_id,"\n",
		 "Source sequences aren't from Unison!\n");
  }

  # filter by insertion criteria
  if ( not ($r->score >= $opts{score_cutoff} 
			and $pct_ident[0] >= $opts{pct_ident_cutoff} ) ) {
	if ( $opts{verbose} ) {
	  printf(STDERR "Unison:%-10d PMAP alignment failed cutoffs (ident: %5d (%d), score: %4.2f (%4.2f))\n",
			 $pseq_id,$pct_ident[0],$opts{pct_ident_cutoff},$r->score,$opts{score_cutoff});
	}
	next RESULT;
  }

 RETRY:
  try {
    my (@hsp_ids,$chr);

    $u->begin_work();
    foreach my $f ( $r->get_SeqFeatures() ) {
      if ( not defined $f->seq_id ) {
		warn( "ERROR: line $.: feature seq_id is undefined; skipping.\n",
			  $_, "\n" );
		$u->rollback();
		next RESULT;
      }
      ($chr) = $f->seq_id =~ m/chr(\w+)/;
      if ( not defined $chr ) {
		warn( "ERROR: line $.: can't parse chromosome from seq_id=(",
			  $f->seq_id,"); skipping.\n" );
		$u->rollback();
		next RESULT;
      }
      $hsp_sth->execute( $opts{genasm_id},  $chr,
						 (( $f->strand > 0 ) ? 'true' : 'false'),
						 $f->start, $f->end, $pseq_id, $f->hstart,
						 $f->hend, $params_id );
      push(@hsp_ids,$hsp_sth->fetchrow_array);
    }

    # get serialized hsp_str - probably should use database version
	# BUG: ABSOLUTELY!
    my $hsp_str = join (':', sort {$a<=>$b} @hsp_ids);

    # load the alignment
    if ( $opts{verbose} ) {
      printf(STDERR "Unison:%-10d mapped to chr%2s (ident: %5d, score: %4.2f, exons: %3d)\n",
			 $pseq_id,$chr,$ident[0],$r->score,($#hsp_ids+1));
    }

	warn("1:$hsp_str\n");
    $aln_sth->execute( $hsp_str, $pseq_id, $ident[0], $qgap_cnt[0],
					   $qgap_bases[0], $tgap_cnt[0], $tgap_bases[0],
					   $params_id, $opts{genasm_id} );
	warn("2:$hsp_str\n");

    # update run history if we haven't yet done so during this session
    $u->upd_run_history($pseq_id,$params_id,undef,undef) unless $updated{$pseq_id}++;
    $u->commit();
  } catch Unison::Exception with {
    my $e = $_[0];
    if ("$e" =~ m/deadlock detected/) {
      $u->rollback();
      warn("$e; retrying.\n");
      goto RETRY;
    }
    die("$e") unless $e->error() =~ m/unique constraint/;
	warn($e);
  };
}



#-------------------------------------------------------------------------------
# NAME: usage
# PURPOSE: output usage message and then exit
#-------------------------------------------------------------------------------
sub usage {
  die( "USAGE: load-pmap [OPTIONS] -g <genasm_id> |--genasm_id <genasm_id> -p <param_name> |--params_id <param_name> output.psl\n" ,
    "\tOPTIONS:\n",
    "\t\t-h|--help: output USAGE statement and exit\n",
    "\t\t-i <cutoff> | --pct_ident_cutoff=<cutoff>: only accept HSPs with percent identity greater than cutoff\n",
    "\t\t-s <cutoff> | --score_cutoff=<cutoff>: only accept HSPs with score greater than cutoff\n" );
}
