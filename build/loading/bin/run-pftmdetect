#!/usr/bin/env perl

#-------------------------------------------------------------------------------
# run-tmdetect -- run and insert tmdetect into Unison
# arguments: 
#   --params_id|-p <params_id>: params_id for loading (required)
#   --tfile|-t <template file>: file containing a list of templates (optional)
#   --update: force update (i.e. delete cooresponding rows in unison before inserting) (optional)
# usage: run-tmdetect [psql options] --params_id <params_id> [--tfile <template file>] [--update]
#
# $Id: run-pftmdetect,v 1.9 2005/05/11 21:53:41 rkh Exp $
#-------------------------------------------------------------------------------

use warnings;
use strict;

use File::Temp;
use Unison;
use Unison::SQL;
use Bio::Seq;
use Bio::SeqIO;
use Bio::Prospect::Options;
use Bio::Prospect::Exceptions;
use Getopt::Long qw(:config gnu_getopt);
use Data::Dumper;
use Error qw(:try);
use IO::Pipe;


my %opts = (
			'debug' => 0,
			'params_id' => 9,
			'pmodelset_id' => undef,
			'porigin_id' => undef,
			'update' => 0,          # try update before insert
			'verbose' => 0,
		   );


print(STDERR '$Id: run-pftmdetect,v 1.9 2005/05/11 21:53:41 rkh Exp $ ', "\n");

GetOptions(\%opts,
       'debug+',
       'params_id=i',
       'update',
       'verbose!',
      )
  or die("$0: bad usage\n");


(defined $opts{params_id})
  || die( "$0: --params_id|-p parameter missing\n" );


if ($opts{debug}) {
  select STDERR; $|++;
  select STDOUT; $|++;
  print Dumper(\%opts);
}

my %run_me;  #pseqs to tmdetect
my (@pseq_ids) = @ARGV ? map {eval "$_"} @ARGV : map { chomp;$_ } <>;


# get temp files for sequences to be tmdetect'd and
# the tmdetect output
my ($fa_fh,  $fa_fn)  = File::Temp::tempfile( UNLINK => 1,
											  SUFFIX => '.fa' );
my ($out_fh, $out_fn) = File::Temp::tempfile( UNLINK => 1,
											  SUFFIX => '.out' );

# output FASTA file with pseqs that need to be tmdetect'd
my $seqio = new Bio::SeqIO( -fh => $fa_fh,
							-format => 'Fasta' );


my $u = new Unison ( dbname=>'csb-dev' );


# get command line
my $clo = $u->run_commandline_by_params_id($opts{params_id});
my @cl = (split(' ',$clo),$fa_fn,">$out_fn");
$cl[0] = "/home/rkh/opt/i686-linux-2.4/bin/tmdetect"; # FIX: this is sloppy

# get pftype_ids for tmdetect output types (i.e. signal, N-TM, M-TM)
my $tmds_id = &get_pftype_id( $u, 'tmdetect/signal' );
my $tmdm_id = &get_pftype_id( $u, 'tmdetect/M (in->out)' );
my $tmdn_id = &get_pftype_id( $u, 'tmdetect/N (out->in)' );
die( "Can't retrieve all of the pftype_ids for tmdetect" ) if 
  ( ! ( defined $tmds_id && defined $tmdm_id && defined $tmdn_id ) ); 


# fetch sequences
PSEQ_ID:
while( my $pseq_id = shift(@pseq_ids) ) {
  my $ran_on = $u->get_run_timestamp($pseq_id,$opts{params_id},undef,undef);
  if (defined $ran_on and not $opts{update}) {
    print(STDERR "Unison:$pseq_id: run with these options on $ran_on; skipping\n");
    next PSEQ_ID;
  }

  my $seq = $u->get_sequence_by_pseq_id( $pseq_id );
  if (not defined $seq) {
	warn("Unison:$pseq_id: no such sequence\n");
	next PSEQ_ID;
  }

  $seqio->write_seq(new Bio::Seq(-id=>"Unison:$pseq_id",
								 -seq=>$seq));
  printf(STDERR "Unison:$pseq_id: %dAA sequence written\n", length($seq));

  $run_me{ $pseq_id }++;
}
$seqio->close();


# exit unless we have seqs to tmdetect
if ( scalar(keys %run_me) == 0 ) {
  warn("no sequences need to be run\n");
  exit(0);
}

# build the commmand line
system("@cl");
my $status = $? >> 8;
($status == 0)
  || die("$0: @cl: exit $?");
print STDERR "cmdline=@cl\n" if $opts{verbose};


my $pipe = new IO::Pipe;
$pipe->reader( @cl )
  || die("couldn't do @cl\n");



# parse the results
# we should do this in a pipe without the temp file...
#Unison:291 1 (S) 7 0 17 0.999933
my %tickled;								# pseq_ids which have been r_h tickled
my $sql = 'insert into pftmdetect (pseq_id,pftype_id,start,stop,prob,params_id) '.
  'values (?,?,?,?,?,?)';
my $sth = $u->prepare( $sql );
open(FP,$out_fn)
  or die("can't open $out_fn for parsing tmdetect results");
while(<FP>) {
  my @tmd = split;
  my $pseq_id;

  if (not (($pseq_id) = $tmd[0] =~ m/^Unison:(\d+)$/)) {
	die("$tmd[0]: looks like query sequences aren't from Unison!\n");
  }
  delete $run_me{ $pseq_id };				# keys remaining after loading have
											# no tmdetect results; see below

  my $pft;									# feature type
  if ( $tmd[2] eq '(S)' ) {
	$pft = $tmds_id;
  } elsif ( $tmd[2] eq '(M)' ) {
	$pft = $tmdm_id;
  } elsif ( $tmd[2] eq '(N)' ) {
	$pft = $tmdn_id;
  } else {
	die("I don't understand feature type `$tmd[2]'\n  line $.: $_\n");
  }

  my $start = $tmd[3]-10 < 1 ? 1 : $tmd[3]-10;

  try {
	$sth->execute( $pseq_id, $pft, $start, $tmd[3]+10,
				   $tmd[6],$opts{params_id});
  } catch Unison::Exception with {
	die("\n$_[0]") unless "$_[0]" =~ m/duplicate key/;
  };

  my $z = $u->upd_run_history($pseq_id,$opts{params_id},undef,undef) if not $tickled{$pseq}++;
  print("Unison:$pseq_id: run_history tickled $z\n");
}


# keys remaining in %run_me are sequences which didn't have any tmdetect
# results... update their run_history (see `delete $run_me{}') above.
foreach my $pseq_id ( keys %run_me ) {
  print("Unison:$pseq_id: no results; run_history tickled ",
		$u->upd_run_history($pseq_id,$opts{params_id},undef,undef),
		"\n");
}

exit(0);



############################################################################
## INTERNAL FUNCTIONS


#-------------------------------------------------------------------------------
# NAME: get_pftype_id
# PURPOSE: retrieve a pftype_id for a given name
#-------------------------------------------------------------------------------

sub get_pftype_id {
  my ($u,$name) = @_;
  my $sql = "select pftype_id from pftype where name='$name'";
  print STDERR "get_pftype_id(), sql=[$sql]\n" if $opts{verbose};
  my $ary_ref = $u->selectall_arrayref( $sql );
  return( $ary_ref->[0][0] );
}
