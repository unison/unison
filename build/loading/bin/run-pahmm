#!/usr/bin/env perl
# $Id: run-pahmm,v 1.6 2004/07/14 00:06:30 rkh Exp $
# run-pahmm -- run hmmer on specified sequences

use warnings;
use strict;
use Bio::PrimarySeq;
use Bio::SearchIO;
use Bio::SeqIO;
use Data::Dumper;
use Error qw(:try);
use File::Temp qw(tempfile tempdir);
use Getopt::Long qw(:config gnu_getopt);
use IO::File;
use IO::Pipe;
use Unison::Exceptions;
use Unison::SQL;
use Unison;


my %opts = 
  (
   force => 0,
   params_id => undef,
   pmodelset_id => undef,
   verbose => 0,

   # not settable on the command line:
   modelfile => '/apps/compbio/share/pfam-14.0/Pfam_fs',
   origin => 'Pfam_fs 14.0',
   params => 'Pfam 14.0'
  );
GetOptions(\%opts,
	'force|f+',
#	'params_id|p=i',
	'pmodelset_id|M=i@',
	'verbose|v+',
) || die("$0: you got usage issues, short stack\n");

my $temproot = "/tmp/run-pahmm-$$";
my $seqfn = "$temproot.fa";
my $pfamfn;  # filename will be set below


my $u = new Unison( dbname=>'csb-dev' );

if (not defined $opts{params_id}) {
  $opts{params_id} = $u->get_params_id_by_name($opts{params});
  if (not defined $opts{params_id}) {
	die("$0: couldn't find params_id for params `$opts{params}'\n");
  }
}

if (not defined $opts{porigin_id}) {
  $opts{porigin_id} = $u->get_porigin_id_by_origin($opts{origin});
  if (not defined $opts{porigin_id}) {
	die("$0: couldn't find porigin_id for params `$opts{origin}'\n");
  }
}





if ( defined $opts{pmodelset_id} ) {
	$pfamfn = "$temproot.pfam";
	my $sql = new Unison::SQL;
	$sql->columns('distinct name')
		->table('pmhmm M');
	$sql->join('pmsm_pmhmm S on M.pmodel_id=S.pmodel_id')
		->where('S.pmodelset_id in (' . join(',',@{$opts{pmodelset_id}}) . ')');
	$sql->order('name');
		(@{$opts{'templates'}}) = map {@$_} @{$u->selectall_arrayref("$sql")};

	my $cmd = "hmm-extract <$opts{modelfile} @{$opts{'templates'}} >$pfamfn";
	print "$cmd\n" if $opts{verbose};
	system( $cmd );
	$? && die("$cmd: $!\n");
} else {
	$pfamfn = $opts{modelfile};
}

my $clo = $u->run_commandline_by_params_id($opts{params_id});
my @cl = (split(' ',$clo), '--acc', $pfamfn, $seqfn);
print "cl: ",join(' ',@cl),"\n" if $opts{verbose};

my @fields = qw(params_id pseq_id start stop pmodel_id mstart mstop gaps qgaps tgaps score eval);
my $pahmm_sth = $u->prepare_cached(sprintf("insert into pahmm (%s) values (%s)",
										   join(',',@fields), join(',',map {'?'} @fields)));

my @pseq_ids = map {eval "$_"} (@ARGV || <>);
my $N = $#pseq_ids+1;
my $n = 0;
PSEQ_ID:
while( my $pseq_id = shift(@pseq_ids) ) {
  my $leader = sprintf("\rUnison:%8s (%4d/%4d %5.1f%%)", $pseq_id, ++$n, $N, $n/$N*100 );
  print(STDERR $leader, ' 'x20);

  foreach my $m (defined $opts{pmodelset_id} ? @{$opts{pmodelset_id}} : undef) {
	my $ran_on = $u->get_run_timestamp($pseq_id,$opts{params_id},$opts{porigin_id},$m);
	if (defined $ran_on and not $opts{update}) {
	  if (not $opts{update}) {
		print(STDERR "$leader: run with these options on $ran_on; skipping\n");
		next PSEQ_ID;
	  }
	  print(STDERR "$leader: run with these options on $ran_on; running anyway\n");
	}
  }


  my $seq = $u->get_sequence_by_pseq_id( $pseq_id );
  if (not defined $seq) {
	warn("\n! couldn't find sequence for pseq_id=$pseq_id\n");
	next;
  }

  my $so = new Bio::SeqIO( -format => 'fasta',
						   -file => ">$seqfn" )
	|| die("! couldn't open $seqfn for writing\n");
  $so->write_seq( new Bio::PrimarySeq( -seq => $seq,
									   -id => "Unison:$pseq_id" ) );
  $so->close();


  print(STDERR "$leader: running");
  my $hmmerpipe = new IO::Pipe;
  $hmmerpipe->reader( @cl )
	|| die("couldn't do @cl\n");

  my $in = new Bio::SearchIO(-format => 'hmmer',
							 -fh => $hmmerpipe);

  my $nhsps = 0;
  my $nins = 0;
  while( my $result = $in->next_result ) {
	while( my $hit = $result->next_hit ) {
	  my $acc = $hit->name();
	  my $pmodel_id = get_pmodel_id($acc);
	  print(STDERR "$leader: loading $acc", ' 'x10);

	  if (not defined $pmodel_id) {
		die("\n! couldn't look up a pmodel_id for $acc!\n");
	  }

	  while( my $hsp = $hit->next_hsp ) {
		$nhsps++;
		my @data = ($opts{params_id}, 
					$pseq_id, $hsp->start('query'), $hsp->end('query'),
					$pmodel_id, $hsp->start('hit'), $hsp->end('hit'),
					$hsp->gaps('total'), $hsp->gaps('query'), $hsp->gaps('hit'),
					int($hsp->score()), $hsp->evalue());
		try {
		  $pahmm_sth->execute(@data);
		  $nins++;
		} catch Unison::Exception with {
		  die("\n$_[0]") unless "$_[0]" =~ m/duplicate key/;
		};
	  }
	}
  }
  $hmmerpipe->close();

  my $z = $u->upd_run_histories($pseq_id,$opts{params_id},$opts{porigin_id},$opts{pmodelset_id});
  print(STDERR "$leader: inserted $nins/$nhsps HSPs; $z\n");
}




my %pmodel_id_cache;
sub get_pmodel_id {
  my $acc = shift;
  if (not exists $pmodel_id_cache{$acc}) {
	my $sth = $u->prepare_cached('select pmodel_id from pmhmm where acc=? and porigin_id=? order by added desc');
	$sth->execute($acc,$opts{porigin_id});
	my $ids = $sth->fetchall_arrayref();
	return undef unless defined $ids;
	die("\n! found ",$#$ids+1," pmodel_ids for model acc $acc\n") if ($#$ids>0);
	$pmodel_id_cache{$acc} = $ids->[0]->[0];
  }
  return $pmodel_id_cache{$acc};
}
