#!/usr/bin/env perl
# $Id: run-pahmm,v 1.31 2006/08/18 20:19:20 rkh Exp $
# run-pahmm -- run hmmer on specified sequences

# TODO:
# - currently fetches 1, runs 1, loads 1; better to run in a pipe, or in
# batches of sequences if that's problematic. ldhmmer will particularly
# like this
#
# - nhits is misleading.  I /thought/ that this was the number of distinct
# models, just as is shown at the top of the HMMer output.  It's not --
# hits are only grouped if they're contiguous in sequence.  For example,
# Unison:1021234 with Pfam_ls 18.0 gives these hsps:
#    hit:1; hsp:1; [ 42,100] PF00047.14      0.001
#    hit:2; hsp:2; [136,169] PF00057.8         5.2
#    hit:3; hsp:3; [138,199] PF00047.14        1.5
#    hit:3; hsp:4; [239,299] PF00047.14       0.86
#    hit:4; hsp:5; [325,420] PF07686.4       0.032
#    hit:5; hsp:6; [339,399] PF00047.14    0.00056
# The while( next_* ) loops below give 5 (!) hits for 6 HSPs, even though
# there are only 3 distinct models.  The HMMer output summary shows only 3
# models of course.
# In short: The model grouping at the top of HMMer output is NOT the same
# as the "hit" grouping returned by the bioperl parser.

use warnings;
use strict;
use Bio::PrimarySeq;
use Bio::SearchIO;
use Bio::SeqIO;
use Data::Dumper;
use Error qw(:try);
use File::Temp qw(tempfile tempdir);
use Getopt::Long qw(:config gnu_getopt);
use IO::File;
use Unison::Exceptions;
use Unison::SQL;
use Unison::pmodelset;
use Unison::run;
use Unison;


sub preload_pmodel_id_cache($$);
sub fetch_sequences ($$@);
sub get_pmodel_id ($);
sub run_and_load ($$);

my $min_double_prec = 1e-307;				# eval underflow if less

my %opts = 
  (
   force => 0,
   modelfile => undef,
   run_id => undef,
   params_id => undef,
   pmodelset_id => undef,
   verbose => 0,
   'seqs-per-run' => 50,
   'max-length' => 10000,					# works, but probably too low
  );
GetOptions(\%opts,
		   'force|f+',
	           'run_id|r=i',
		   'verbose|v+',
		   'seqs-per-run|N=i',
		  ) || die("$0: you got usage issues, short stack\n");

my $temproot = "/tmp/run-pahmm-$$";
my $seqfn = "$temproot.fa";

my $u = new Unison();

if (defined $opts{params_id} || (defined $opts{pmodelset_id})) {
    die("$0: use run_id (-r),  may not specify params_id/pmodelset_id\n");
}

($opts{params_id},$opts{pmodelset_id}) = (defined $opts{run_id} ? ($u->get_run_params_id_pmodelset_id($opts{run_id})) :  die("$0: run not defined (-r)\n"));

(defined $opts{params_id})
  || die("$0: could not fetch parameters from run_id $opts{run_id}\n");
(defined $opts{pmodelset_id})
  || die("$0: could not fetch modelset from run_id $opts{run_id}\n");

$opts{modelfile} = "$ENV{UNISON_HOME}/".$u->selectrow_array("select data_url from pmodelset where pmodelset_id=$opts{pmodelset_id}") || die ("$0: Could not fetch modelfile for modelset=$opts{pmodelset_id}\n");

(-e $opts{modelfile})
  || die("$0: $opts{modelfile} doesn't exist\n");

my $nmodels = preload_pmodel_id_cache($u,$opts{pmodelset_id});

my $clo = $u->run_commandline_by_params_id($opts{params_id});

my $cl = "$clo $opts{modelfile} $seqfn | grep -v \"Genentech\\|Logical Depth\\|^\$\"";

printf(STDERR "# loading params '%s' (params_id=%d) pmodelset '%s' (pmodelset_id='%d') \n",
	   $u->get_params_name_by_params_id($opts{params_id}),
	   $opts{params_id},$u->get_pmodelset_name_by_pmodelset_id($opts{pmodelset_id}),$opts{pmodelset_id});
printf(STDERR "# %d models from pmodelset_id=%d\n",
	   $nmodels,$opts{pmodelset_id});

printf(STDERR "# models in file `%s'\n", $opts{modelfile});
printf(STDERR "# commandline: %s\n", $cl);

my @fields = qw(params_id pseq_id start stop pmodel_id mstart mstop gaps qgaps tgaps score eval);
my $pahmm_sth = $u->prepare_cached(sprintf("insert into pahmm (%s) values (%s)",
										   join(',',@fields), join(',',map {'?'} @fields)));

my $already_ran_sth = $u->prepare_cached("select pfeature_id from pahmm where params_id = ? and pseq_id = ? and pmodel_id = ? and start=?");

my (@pseq_ids) = @ARGV ? map {eval "$_"} @ARGV : map { chomp;$_ } <>;
my $N = $#pseq_ids+1;
my $n = 0;
my $totseqs = 0;
my $tothits = 0;
my $tothsps = 0;
my $toterrs = 0;
my $totdlock = 0;

while ( @pseq_ids ) {
  my (@ids) = splice(@pseq_ids,0,$opts{'seqs-per-run'});

  my $nseq = fetch_sequences($u,$seqfn,@ids);
  next if ($nseq == 0);

  print(STDERR "fetched $nseq sequences; running...\n");

  my ($seqs,$hits,$hsps,$errs,$dlock) = run_and_load($u,$seqfn);
  $totseqs += $seqs;
  $tothits += $hits;
  $tothsps += $hsps;
  $toterrs += $errs;
  $totdlock += $dlock;

  my $Ncomp = $N - ($#pseq_ids+1);
  printf(STDERR "run-pahmm: $Ncomp/$N (%5.1f%% complete); $totseqs seqs; $tothits hits; $tothsps HSPs; $toterrs errors; $totdlock retries\n",
		 $Ncomp / $N * 100);
}


sub fetch_sequences ($$@) {
  # fetch sequences to temp file
  my $u = shift;
  my $seqfn = shift;
  my @pseq_ids = @_;
  my $nseq = 0;

  my $so = new Bio::SeqIO( -format => 'fasta',
						   -file => ">$seqfn" )
	|| die("! couldn't open $seqfn for writing\n");

  foreach my $pseq_id (@pseq_ids) {
	if ($u->already_ran($pseq_id,$opts{run_id})) {
	  warn("Unison:$pseq_id already run with these parameters\n");
	  next;
	}
	my $seq = $u->get_sequence_by_pseq_id( $pseq_id );
	if (not defined $seq) {
	  warn("\n! couldn't find sequence for pseq_id=$pseq_id\n");
	  next;
	}

	if (length($seq) > $opts{'max-length'}) {
	  warn("! Unison:$pseq_id is over $opts{'max-length'} AA; skipping\n");
	  next;
	}

	$so->write_seq( new Bio::PrimarySeq( -seq => $seq,
										 -id => "Unison:$pseq_id" ) );
	$nseq++;
  }
  $so->close();
  return $nseq;
}


sub run_and_load ($$) {
  my $u = shift;
  my $seqfn = shift;
  my $rl_seqs = 0;
  my $rl_hits = 0;
  my $rl_hsps = 0;
  my $rl_errs = 0;
  my $rl_dlock = 0;

  my $hmmerpipe = new IO::File("$cl |");
  my $in = new Bio::SearchIO(-format => 'hmmer',
							 -fh => $hmmerpipe);

  while ( my $result = $in->next_result ) {	# "result" is a query sequence
	my ($pseq_id) = $result->query_name() =~ m/Unison:(\d+)/;
	(defined $pseq_id)
	  || die("couldn't parse pseq_id from hmmer results\n");

	$rl_seqs++;

	my $ndlock = 0;

  RETRY:
	my $nhits = 0;
	my $nhsps = 0;
	try {
	  $u->begin_work();
	  $result->rewind if ($ndlock > 0);
	  while ( my $hit = $result->next_hit ) {
		$nhits++;
		my $acc = $hit->name();
		my $pmodel_id = get_pmodel_id($acc);
		if (not defined $pmodel_id) {
		  die("\n! couldn't look up a pmodel_id for $acc in pmodelset $opts{pmodelset_id}!\n");
		}		

		$hit->rewind if ($ndlock > 0);
		while ( my $hsp = $hit->next_hsp ) {


		  ## FIX ME
		  ## this is to avoid duplicate key errors.
		  ## caused by rerunning against all models in sets. i.e pfam22 models are also present in pfam21
		  ## ideally we don't want to rerun sequences against models
		  $already_ran_sth->execute($opts{params_id},$pseq_id, $pmodel_id, $hsp->start('query'));
		  next if defined $already_ran_sth->fetchrow_arrayref();

		  $nhsps++;
		  my @data = ($opts{params_id},
					  $pseq_id, $hsp->start('query'), $hsp->end('query'),
					  $pmodel_id, $hsp->start('hit'), $hsp->end('hit'),
					  $hsp->gaps('total'), $hsp->gaps('query'), $hsp->gaps('hit'),
					  sprintf('%.0f',$hsp->score()), # .0f => round to nearest int
					  ( $hsp->evalue() < $min_double_prec ? 0 : $hsp->evalue() )
					 );
		  $pahmm_sth->execute(@data);
		}
	  }
	  my $z = $u->upd_run_history($pseq_id,$opts{run_id});
	  $u->commit();

	  print(STDERR "# Unison:$pseq_id: $nhits hits, $nhsps HSPs; committed $z",
			($ndlock>0 ? "; deadlock resolved after $ndlock dlockies" : ''),
			"\n");
	  $rl_hits += $nhits;
	  $rl_hsps += $nhsps;
	  $rl_dlock += $ndlock;

	} catch Unison::Exception with {

	  my $e = $_[0];
	  if ("$e" =~ m/deadlock detected/) {
		$u->rollback();
		$ndlock++;
		warn("\n$e! Unison:$pseq_id: deadlock $ndlock on HSP $nhsps\n");
		if ($ndlock < 25) {
		  my $sleep = ( $ndlock<5 ? 0 : $ndlock<10 ? 1 : $ndlock<20 ? 10 : 2^($ndlock-15) );
		  sleep $sleep;
		  warn("! Unison:$pseq_id, deadlock $ndlock: resuming after sleeping $sleep seconds.\n");
		  goto RETRY;
		}
		warn("! Too many deadlocks. Aborting Unison:$pseq_id.\n");
	  } elsif ("$e" =~ m/duplicate key/ or "$e" =~ m/(?:over|under)flow/) {
		$u->rollback();
		$rl_errs++;
		warn("\n$e\n! Unison:$pseq_id load failed; rolling back.\n");
	  } else {
		die("$e");
	  }
	};
  }											# end sequence loop

  $hmmerpipe->close();
  return( $rl_seqs, $rl_hits, $rl_hsps, $rl_errs, $rl_dlock );
}




my %pmodel_id_cache;

sub preload_pmodel_id_cache($$) {
  my $u = shift;
  my $pmodelset_id = shift;
  my $ar = $u->selectall_arrayref('select m.acc,m.pmodel_id from pmhmm m join pmsm_pmhmm ms on ms.pmodel_id=m.pmodel_id where ms.pmodelset_id=?',
								 undef, $pmodelset_id);
  %pmodel_id_cache = map {$_->[0] => $_->[1]} @$ar;
  return $#$ar+1;
}

sub get_pmodel_id ($) {
  my $acc = shift;
  if (not exists $pmodel_id_cache{$acc}) {
	my $sth = $u->prepare_cached('select h.pmodel_id from pmhmm h join pmsm_pmhmm m on m.pmodel_id=h.pmodel_id where h.acc=? and m.pmodelset_id=? order by h.added desc');
	$sth->execute($acc,$opts{pmodelset_id});
	my $ids = $sth->fetchall_arrayref();
	return undef unless defined $ids;
	die("\n! found ",$#$ids+1," pmodel_ids for model acc $acc\n") if ($#$ids>0);
	$pmodel_id_cache{$acc} = $ids->[0]->[0];
  }
  return $pmodel_id_cache{$acc};
}
