#!/usr/bin/env perl
# $Id: run-pahmm,v 1.1 2004/01/13 16:13:14 rkh Exp $
# run-pahmm -- run hmmer on specified sequences

use warnings;
use strict;
use Bio::PrimarySeq;
use Bio::SearchIO;
use Bio::SeqIO;
use Data::Dumper;
use Error qw(:try);
use File::Temp qw(tempfile tempdir);
use Getopt::Long qw(:config gnu_getopt);
use IO::File;
use IO::Pipe;
use Unison::Exceptions;
use Unison;


my %opts = (
			force => 0,
			params_id => undef,
		   );
GetOptions(\%opts,
		   'force|f+',
		   'params_id|p=i',
		  )
  || die("$0: you got usage issues, short stack\n");


my $temproot = "/tmp/run-pahmm-$$";
my $seqfn = "$temproot.fa";


my $u = new Unison;




if (not defined $opts{params_id}) {
  die("! you must provide a --params_id=<params_id> argument\n");
}
my $clo = $u->selectrow_array("select commandline from params where params_id=$opts{params_id}");
if (not defined $clo) {
  die("! couldn't find command line options for params_id=$opts{params_id}\n");
}
my @cl = (split(' ',$clo), $seqfn);


my @fields = qw(params_id pseq_id start stop pmodel_id mstart mstop gaps qgaps tgaps score eval);
my $pahmm_sth = $u->prepare_cached(sprintf("insert into pahmm (%s) values (%s)",
										   join(',',@fields), join(',',map {'?'} @fields)));


my @pseq_ids = map {eval "$_"} @ARGV;
my $N = $#pseq_ids+1;
my $n = 0;


PSEQ_ID:
while( my $pseq_id = shift(@pseq_ids) ) {
  my $leader = sprintf("\rUnison:%8s (%4d/%4d %5.1f%%)", $pseq_id, ++$n, $N, $n/$N*100 );
  print(STDERR $leader, ' 'x20);


  my $ran_on = $u->get_run_timestamp($pseq_id,$opts{params_id},undef,undef);
  if (defined $ran_on) {
	print(STDERR "$leader: run with these options on $ran_on; skipping\n");
	next PSEQ_ID;
  }


  my $seq = $u->get_sequence_by_pseq_id( $pseq_id );
  if (not defined $seq) {
	warn("\n! couldn't find sequence for pseq_id=$pseq_id\n");
	next;
  }

  my $so = new Bio::SeqIO( -format => 'fasta',
						   -file => ">$seqfn" )
	|| die("! couldn't open $seqfn for writing\n");
  $so->write_seq( new Bio::PrimarySeq( -seq => $seq,
									   -id => "Unison:$pseq_id" ) );
  $so->close();


  my $hmmerpipe = new IO::Pipe;
  $hmmerpipe->reader( @cl )
	|| die("couldn't do @cl\n");

  my $in = new Bio::SearchIO(-format => 'hmmer',
							 -fh => $hmmerpipe);

  my $nhsps = 0;
  my $nins = 0;
  while( my $result = $in->next_result ) {
	while( my $hit = $result->next_hit ) {
	  my $name = $hit->name();
	  my $pmodel_id = get_pmodel_id($name);
	  print(STDERR "$leader: loading $name");

	  if (not defined $pmodel_id) {
		die("\n! couldn't look up a pmodel_id for $name!\n");
	  }

	  while( my $hsp = $hit->next_hsp ) {
		$nhsps++;
		my @data = ($opts{params_id}, 
					$pseq_id, $hsp->start('query'), $hsp->end('query'),
					$pmodel_id, $hsp->start('hit'), $hsp->end('hit'),
					$hsp->gaps('total'), $hsp->gaps('query'), $hsp->gaps('hit'),
					int($hsp->score()), $hsp->evalue());
		try {
		  $pahmm_sth->execute(@data);
		} catch Unison::Exception with {
		  warn("\n$_[0]");
		};
		$nins++;
	  }
	}
  }

  $hmmerpipe->close();
  print(STDERR "$leader: inserted $nins/$nhsps hsps; last_update=", 
		$u->upd_run_history($pseq_id,$opts{params_id},undef,undef), 
		"\n");
}




my %pmodel_id_cache;
sub get_pmodel_id {
  my $name = shift;
  if (not exists $pmodel_id_cache{$name}) {
	my $sth = $u->prepare_cached('select pmodel_id from pmhmm where name=? order by added desc');
	$sth->execute($name);
	my $ids = $sth->fetchall_arrayref();
	return undef unless defined $ids;
	warn("\n! found ",$#$ids+1," pmodel_ids for model name $name; returning most recent\n") if ($#$ids>0);
	$pmodel_id_cache{$name} = $ids->[0]->[0];
  }
  return $pmodel_id_cache{$name};
}
