#!/usr/bin/env perl
# $Id: load-pmhmm,v 1.12 2006/08/04 03:00:26 rkh Exp $
# load pfam HMM into unison
# eg$ load-pmhmm /path/to/pfam-14.0/Pfam_fs


# NOTE: See version 1.6 for the version that includes pmodel HMM
# versioning


use strict;
use warnings;
use Unison;
use Getopt::Long qw(:config gnu_getopt);
use Data::Dumper;
use IO::Pipe;
use IO::File;


my %opts =
  (
   'origin' => undef,
   'descr' => undef,
  );

GetOptions(\%opts,
		   'origin=s',
		   'descr=s',
		   'verbose|v+',
		  ) || die("$0: you got usage issues, short stack\n");


my $fn;
($fn = shift and $fn =~ m%^/%)
  || die("$0: please privide the full path to the HMM models\n");

if ($fn =~ m/pfam/i) {
  my ($pfam_version,$fl) = $fn =~ m%pfam-([\.\d]+)/Pfam_([lf]s)%;
  (defined $fl)
	|| die("$0: couldn't parse origin (pfam-<version>/Pfam_([fl]s) from $fn\n");
  $opts{origin} = "Pfam $pfam_version $fl";
  $opts{descr} = "Pfam_$fl version $pfam_version";
} else {
  (defined $opts{origin})
	|| die("origin my be specified when loading from other than Pfam\n");
  $opts{descr} = $opts{origin} unless defined $opts{descr};
}


my $data_url = $fn;
$data_url =~ s/\.hmm$//;
$data_url .= '.hmmb';

(-f $data_url)
  || die("$0: You must make `$data_url' before proceeding\n");


my $in;
if ($fn =~ m/.gz/) {
  $in = new IO::Pipe;
  my @args = ('gzip', '-cdq', $fn);
  $in->reader( @args )
	|| die("$0: @args: $!\n");
} else {
  $in = new IO::File;
  $in->open( "<$fn" )
	|| die("$0: $fn: $!\n");
}



my $u = new Unison( dbname=>'csb-dev', username=>'loader' );

my $origin_id = $u->origin_si_origin_id($opts{origin});
(defined $origin_id)
  || die("$0: origin $opts{origin}: $@\n");

my $sth = $u->prepare('update origin set url=?,link_url=?,descr=?,data_url=?,is_public=TRUE,version=? where origin_id=?');
$sth->execute('http://pfam.janelia.org/',
			  'http://pfam.janelia.org/cgi-bin/getdesc?acc=%s',
			  $opts{descr},
			  $data_url,
			  $pfam_version,
			  $origin_id)
  || die("$0: update origin: $@\n");

printf(STDERR "# loading models into $opts{origin} (origin_id=$origin_id)\n");


my @insert_fields = qw(origin_id name acc descr len nseq cksum
					ga_seq ga_dom tc_seq tc_dom nc_seq nc_dom);
my $insert_stmt = sprintf('insert into pmhmm (%s) values (%s)',
						  join(',',@insert_fields),
						  join(',',map {'?'} @insert_fields) );
my $sth_insert_pmhmm = $u->prepare($insert_stmt);



$/ = "\n//\n";
$u->begin_work();
while(my $blk = <$in>) {
  chomp($blk);
  my @F = qw(NAME ACC DESC LENG NSEQ CKSUM GA TC NC);
  my ($name,$acc,$descr,$len,$nseq,$cksum,$ga,$tc,$nc) 
	= map {my ($r) = $blk =~ m/^$_\s+(.+)/m; $r||undef}  @F;
  $acc = $name unless defined $acc;
  $descr = $name unless defined $descr;
  my ($gas,$gad) = defined $ga ? split(' ',$ga) : (undef,undef);
  my ($tcs,$tcd) = defined $tc ? split(' ',$tc) : (undef,undef);
  my ($ncs,$ncd) = defined $nc ? split(' ',$nc) : (undef,undef);
  $sth_insert_pmhmm->execute($origin_id,$name,$acc,$descr,$len,$nseq,$cksum,
							 $gas,$gad, $tcs,$tcd, $ncs,$ncd);

  print(STDERR "loaded $acc: $name ($descr)\n");
}

printf("done; last updated=%s\n", $u->origin_last_updated($origin_id,1));

print("Committing...\n");
$u->commit();
