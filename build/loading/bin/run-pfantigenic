#!/usr/bin/env perl
# run-pfantigenic -- run EMBOSS antigenic and load into unison
# $Id$


use Unison;
use Bio::SeqIO;
use Bio::PrimarySeq;
use IPC::Open2;
use IO::Handle;
use Env qw(@PATH);

unshift(@PATH, '/apps/compbio/i686-linux-2.4/opt/EMBOSS/bin');
my $run_id = 4;								# hardwired for now

sub run1($$);

my $u = new Unison;

my @cmd = ('antigenic', split(' ',$u->run_commandline_by_run_id( $run_id )));
print(STDERR "# running with @cmd\n");

my $sth = $u->prepare( 'insert into pfantigenic(pseq_id,start,stop,score,max_pos,run_id) values (?,?,?,?,?,?)' );

while( @ARGV ) {
  run1( $u, shift );
}

exit(0);


sub run1($$) {
  my $u = shift;
  my $pseq_id = shift;

  my $seq = $u->get_sequence_by_pseq_id( $pseq_id );
  if (not defined $seq) {
	warn("$0: Unison:$pseq_id doesn't exist\n");
	return;
  }

  my ($rer,$wer,$pid);
  eval { $pid = open2( $rer, $wer, @cmd ) };
  #print(STDERR "## pid=$pid\n");
  if ($@) {
	die("$0: @cmd failed\n") if ( $@ =~ m/^open2/ );
	die;
  }

  my $seqio = new Bio::SeqIO( -format => 'fasta',
							  -fh => $wer );
  $seqio->write_seq( new Bio::PrimarySeq(-seq => $seq,
										 -id  => "Unison:$pseq_id") );
  #print(STDERR '## sent ', substr($seq,0,20), "...\n");
  $wer->close();

  my $kid = waitpid($pid,0);
  #print(STDERR "## reaped $pid ($kid)\n");

  local $/ = "\n\n";
  while( my $block = <$rer> ) {
	my ($start,$end,$score,$max_pos) 
	  = $block =~ m/Start: (\d+)\nEnd: (\d+)\nLength: \d+\nScore: (\S+)\nMax_score_pos: (\d+)\n/;
	next unless defined $start;
	$sth->execute($pseq_id,$start,$end,$score,$max_pos,$run_id);
  }
}


