#! /usr/bin/env perl

#-------------------------------------------------------------------------------
# NAME: load-pcluster
# PURPOSE: cluster a set of hsps into representative sets
# 
# $Id: load-pcluster,v 1.2 2004/06/10 17:59:20 cavs Exp $
#-------------------------------------------------------------------------------

use warnings;
use Getopt::Long;
use Unison;
use strict;

my $uni = new Unison();

# clear out the tables and reset the pcluster_id sequence
$uni->do( "delete from pcluster_member; delete from pcluster; select setval('pcluster_pcluster_id_seq'::text,1);" );

# build the pclusters from uni_h seqs with blat hits that have 90% or better pct_identity.
# get better pclusters by using high quality seqs and high identity blat hits.
my $sth = $uni->prepare( 'select * from blatloci where pseq_id in ' .
  '(select distinct pseq_id from pseqset where pset_id in (42)) and ' .
  'pct_ident>=90 order by chr,plus_strand,gstart' );
$sth->execute();

my %c;
my $start  = -1;
my $stop   = -1;
my $chr    = '';
my $str = '';
my $genasm_id = 1;  # hard-code for now
while( my $r = $sth->fetchrow_hashref() ) {
  # append to current cluster  
  if ( ($r->{chr} eq $chr) && ($r->{plus_strand} eq $str) && ($r->{gstart} < $stop) ) {
    push @{$c{$chr}{$str}{$start}{pseq_ids}},$r->{pseq_id};
    push @{$c{$chr}{$str}{$start}{gstarts}},$r->{gstart};
    push @{$c{$chr}{$str}{$start}{gstops}},$r->{gstop};
    $stop = $r->{gstop} if $r->{gstop} > $stop;

    if ( $ENV{DEBUG} ) {
      printf("append to cluster: chr%s\t%s\t%d\t%d\t%s\n",
        $r->{chr},$r->{plus_strand},$r->{gstart},$r->{gstop},$r->{pseq_id});
    }
  } 
  
  # start a new cluster
  else {
    # assign stop to last cluster
    if ( $stop != -1 ) {
      $c{$chr}{$str}{$start}{stop} = $stop;
    }
    $chr   = $r->{chr};
    $str   = $r->{plus_strand};
    $start = $r->{gstart};
    $stop  = $r->{gstop};

    push @{$c{$chr}{$str}{$start}{pseq_ids}},$r->{pseq_id};
    push @{$c{$chr}{$str}{$start}{gstarts}},$r->{gstart};
    push @{$c{$chr}{$str}{$start}{gstops}},$r->{gstop};

    if ( $ENV{DEBUG} ) {
      printf("start new cluster: chr%s\t%s\t%d\t%d\t%s\n",
        $r->{chr},$r->{plus_strand},$r->{gstart},$r->{gstop},$r->{pseq_id});
    }
  }
}
$c{$chr}{$str}{$start}{stop} = $stop;


my $s_sth  = $uni->prepare('select nextval(\'pcluster_pcluster_id_seq\'::text)');
my $c_sth  = $uni->prepare('insert into pcluster (pcluster_id,genasm_id, gstart, gstop, chr, plus_strand) values (?,?,?,?,?,?)');
my $cm_sth = $uni->prepare('insert into pcluster_member (pcluster_id, pseq_id, gstart, gstop) values (?,?,?,?)');

# load the clusters
foreach $chr ( sort { $a cmp $b } keys %c ) {
  foreach $str ( sort { $a <=> $b } keys %{$c{$chr}} ) {
    foreach $start ( sort { $a <=> $b } keys %{$c{$chr}{$str}} ) {
      $s_sth->execute();
      my $row = $s_sth->fetchrow_arrayref();
      my $pcluster_id = $row->[0];

      # insert into pcluster
      my @data = ($pcluster_id,$genasm_id,$start,$c{$chr}{$str}{$start}{stop},$chr,($str == 0) ? 'false' : 'true');
      if ( $ENV{DEBUG} ) {
        printf ("insert pcluster_id: %d, genasm_id: %d, start: %d, stop: %d, chr: %s, plus_strand: %s\n",@data);
      }
      $c_sth->execute(@data);

      # insert into pcluster_member
      for (my $i=0; $i<scalar(@{$c{$chr}{$str}{$start}{pseq_ids}}); $i++) { 
          my @mdata = ($pcluster_id,$c{$chr}{$str}{$start}{pseq_ids}->[$i],
            $c{$chr}{$str}{$start}{gstarts}->[$i], $c{$chr}{$str}{$start}{gstops}->[$i]);
          if ( $ENV{DEBUG} ) {
            printf ("insert pcluster_id: %d, pseq_id: %d, start: %d, stop: %d\n",@mdata);
          }
          $cm_sth->execute(@mdata);
      }
    }
  }
}
