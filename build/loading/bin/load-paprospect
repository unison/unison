#!/usr/bin/env perl
# $Id$
# load-p2thread -- load prospect2 thread results into unison
# from xml files (optionally with svm scores from sort files)


use warnings;
use strict;
use lib ('.', "$ENV{HOME}/unison/perl5");
use Genentech::Unison;
use Genentech::Unison::Prospect2;
use IO::File;;
use File::Temp;
use Getopt::Long qw(:config gnu_getopt);
use Prospect2::File;
use Data::Dumper;

my $svm_fn;
my $xml_fn;
GetOptions(
		   'svm|s=s' => \$svm_fn,
		   'xml|x=s' => \$xml_fn,
		  )
  || die("$0: bad usage\n");

die("prospect xml filename required (-x)\n") unless defined $xml_fn;
warn("prospect sort filename recommended (-s)\n") unless defined $svm_fn;


$Data::Dumper::Indent = 0;
my %scorekeymap = ( 'rawScore' => 'raw', 'mutationScore' => 'mutation',
					'singletonScore' => 'singleton', 
					'pairwiseCore' => 'pairwise', 'gapPenalty' => 'gap',
					'ssfit' => 'ssfit', 'radiusOfGyration' => 'rgyr' );

my $u = new Genentech::Unison;

my $pf = new Prospect2::File;
$pf->open( "<$xml_fn" )
  || die("$xml_fn: $!\n");

my %svm;
%svm = read_svm_scores( $svm_fn ) if $svm_fn;


my $p2params_id;							# determined once!  don't concat
my $pseq_id;								#   xml files from separate runs!
while( my $t = $pf->next_thread() )
  {
  if (not defined $pseq_id)
	{
	$pseq_id = $u->si_pseq_id( $t->qseq() );
	defined $pseq_id
	  || die("pseq_id not provided and couldn't be generated\n");
	}
  if (not defined $p2params_id)
	{ 
	$p2params_id = $u->get_p2params_id_from_settings( %{$t->{settings}} );
	defined $p2params_id
	  || die("p2params_id not provided and couldn't be found in unison\n");
	}

  my $template_name = $t->tname();
  my $p2template_id = $u->get_p2template_id_by_name( $template_name );

  # create hash of data to be inserted, with unison field names as keys
  my %data = map  { $scorekeymap{$_} => @{ %{$t->{scoreInfo}} }{$_} }  (keys %scorekeymap);
  $data{pseq_id} = $pseq_id;
  $data{p2params_id} = $p2params_id;
  $data{p2template_id} = $p2template_id;
  if ($t->{scoreInfo}->{zscore} ne '-999.00')
	{ $data{zscore} = $t->{scoreInfo}->{zscore} };
  if (exists $svm{$template_name})
	{ $data{svm} = $svm{$template_name} };
  $data{nident} = $t->{alignmentInfo}->{nident};
  $data{nalign} = $t->{alignmentInfo}->{nalign};

  print(STDERR "# added thread for $template_name (", Dumper(\%data), "\n");
  $u->add_p2thread( %data );
  }




sub read_svm_scores
  {
  my $svm_fn = shift;
  my $fh = new IO::File;
  my %svm;
  $fh->open("<$svm_fn")
	|| die("$svm_fn: $!\n");
  while( my $line = <$fh> )
	{
	next if $line =~ m/^:/;
	my ($tname,$svm) = ( split(' ',$line) )[0,3];
	$svm{$tname} = $svm;
	}
  $fh->close();
  return %svm;
  }

