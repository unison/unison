#!/usr/bin/env perl

#------------------------------------------------------------------------------- 
# NAME: cavs2sql
# PURPOSE: generate SQL inserts from SCOP cla, des, and hie files
# parses SCOP 1.61 (and probably >=1.55)
# USAGE:
# cavs2sql [-c clafn] [-d desfn] [-h hiefn] [-C] | psql -qaf-
# -c, -d, -h may be specified in combination
# -C outputs copy from statements instead (UNTESTED)
#
# $Id$
#------------------------------------------------------------------------------- 


use strict;
use warnings;
use IO::File;
use Getopt::Long qw(:config gnu_getopt);
use Unison;

my %opts;
$opts{acavsy} = 0;
GetOptions( \%opts,
      'cla|c=s',
      'des|d=s',
      'hie|h=s',
      'acavsy|C+' )
  || die("usage\n");

my $u = new Unison();

#&load_cla($u,$opts{cla}) if exists $opts{cla};
&load_des($u,$opts{des}) if exists $opts{des};
&load_hie($u,$opts{hie}) if exists $opts{hie};
exit(0);


#-------------------------------------------------------------------------------
# NAME: drop_fk
# PURPOSE: drop fks to scop tables
#-------------------------------------------------------------------------------
sub drop_fk {
	my $dbh = shift;
	$dbh->do('ALTER TABLE pmprospect2 DROP CONSTRAINT cavs.p2template_sunid_exists');
	return;
}


#-------------------------------------------------------------------------------
# NAME: add_fk
# PURPOSE: add fks to scop tables
#-------------------------------------------------------------------------------
sub add_fk {
	my $dbh = shift;
	$dbh->do('ALTER TABLE ONLY pmprospect2 '.
	    'ADD CONSTRAINT p2template_sunid_exists FOREIGN KEY (sunid) REFERENCES scop.cla(sunid)' );
	return;
}


#-------------------------------------------------------------------------------
# NAME: load_cla
# PURPOSE: load cla table from the dir.cavs.cla.txt file
#-------------------------------------------------------------------------------
sub load_cla {
  my ($dbh,$fn) = @_;
  my $fh = new IO::File;

	$dbh->do('truncate cavs.cla');
  my $sql = 'insert into cavs.cla (sid,pdb,def,sccs,sunid,cl,cf,sf,fa,dm,sp) ' .
    'values (?,?,?,?,?,?,?,?,?,?,?)';
  (my $sqlf = $sql) =~ s/\?/%s/g;
  $sqlf .= "\n";
  my $sth = $dbh->prepare( $sql );
  $fh->open("<$fn") || return undef;
  while(my $l = <$fh>) {
    next if $l =~ m/^\#/;
    my ($sid,$pdb,$def,$sccs,$px,$H) = split(' ',$l);
    my ($cl) = $H=~m/cl=(\d+)/;
    my ($cf) = $H=~m/cf=(\d+)/;
    my ($sf) = $H=~m/sf=(\d+)/;
    my ($fa) = $H=~m/fa=(\d+)/;
    my ($dm) = $H=~m/dm=(\d+)/;
    my ($sp) = $H=~m/sp=(\d+)/;

    printf ($sqlf,$sid,$pdb,$def,$sccs,$px,$cl,$cf,$sf,$fa,$dm,$sp);
    $sth->execute($sid,$pdb,$def,$sccs,$px,$cl,$cf,$sf,$fa,$dm,$sp);
  }
  $fh->close();
  return 1;
}


#-------------------------------------------------------------------------------
# NAME: load_des
# PURPOSE: load des table from dir.cavs.des.txt file
#-------------------------------------------------------------------------------
sub load_des {
  my ($dbh,$fn) = @_;
  my $fh = new IO::File;

	$dbh->do('truncate cavs.des');
  my $sql = 'insert into cavs.des (sunid,level,sccs,sname,descr) values (?,?,?,?,?)';
  (my $sqlf = $sql) =~ s/\?/%s/g;
  $sqlf .= "\n";
  my $sth = $dbh->prepare( $sql );
  $fh->open("<$fn") || return undef;
  while(my $l = <$fh>) {
    next if $l =~ m/^\#/;
    chomp $l;
    my ($sunid,$lvl,$sccs,$sname,$descr) = split(' ',$l,5);
    $sname = ($sname eq '-' ) ? 'NULL' : $sname;

    printf ($sqlf,$sunid,$lvl,$sccs,$sname,$descr);
    $sth->execute($sunid,$lvl,$sccs,$sname,$descr);
  }
  $fh->close();
  print("\\.\n") if $opts{acavsy};
  return 1;
}


#-------------------------------------------------------------------------------
# NAME: load_hie
# PURPOSE: load hie table from dir.cavs.hie.txt file
#-------------------------------------------------------------------------------
sub load_hie {
  my ($dbh,$fn) = @_;

  my $fh = new IO::File;
	$dbh->do('truncate cavs.hie');
  my $sql = 'insert into cavs.hie (sunid,psunid,children) values (?,?,?)';
  (my $sqlf = $sql) =~ s/\?/%s/g;
  $sqlf .= "\n";
  my $sth = $dbh->prepare( $sql );
  $fh->open("<$fn") || return undef;
  while(my $l = <$fh>) {
    next if $l =~ m/^\#/;
    chomp $l;
    my ($sunid,$psunid,$children) = split(' ',$l,3);
    $psunid = $psunid eq '-' ? '\N' : $psunid;
    $children = $children eq '-' ? '\N' : "{$children}";

    printf ($sqlf,$sunid,$psunid,$children);
    $sth->execute($sunid,$psunid,$children);
  }
  $fh->close();
  return 1;
}
