#!/usr/bin/env perl

#------------------------------------------------------------------------------- 
# NAME: cavs2sql
# PURPOSE: generate SQL inserts from SCOP cla, des, and hie files
# parses SCOP 1.61 (and probably >=1.55)
# USAGE:
# cavs2sql [-c clafn] [-d desfn] [-h hiefn] [-C] | psql -qaf-
# -c, -d, -h may be specified in combination
# -C outputs copy from statements instead (UNTESTED)
#
# $Id: load-scop,v 1.2 2004/03/18 17:36:12 cavs Exp $
#------------------------------------------------------------------------------- 


use strict;
use warnings;
use IO::File;
use Getopt::Long qw(:config gnu_getopt);
use Unison;

my %opts;
$opts{acavsy} = 0;
GetOptions( \%opts,
      'cla|c=s',
      'des|d=s',
      'hie|h=s',
      'verbose|v+',
      'acavsy|C+' )
  || die("usage\n");

my $u = new Unison();

#&drop_fk($u);
#&load_cla($u,$opts{cla}) if exists $opts{cla};
#&load_des($u,$opts{des}) if exists $opts{des};
#&load_hie($u,$opts{hie}) if exists $opts{hie};
#&add_fk($u);
&load_pmprospect2_scop($u);
exit(0);


#-------------------------------------------------------------------------------
# NAME: load_pmprospect2_scop
# PURPOSE: load the pmprospect2_scop table
#-------------------------------------------------------------------------------
sub load_pmprospect2_scop {
  my $dbh = shift;

  my $sql = "TRUNCATE cavs.pmprospect2_scop";
  printf STDERR "$sql\n" if $opts{verbose};
  $dbh->do( $sql );

  # load scop domains
  $sql = "INSERT INTO cavs.pmprospect2_scop " .
    "SELECT p.pmodel_id,c.sunid FROM pmprospect2 p, cavs.cla c WHERE " .
    "p.porigin_id=porigin_id_lookup('Prospect2/SCOP'::text) AND c.sid=p.acc";
  printf STDERR "$sql\n" if $opts{verbose};
  $dbh->do( $sql );

  # load any remaining scop domains by pdb. if acc has no chain identifier (i.e. 2 trailing underscores)
  # then match acc to pdb name.  otherwise, use characters 2-6 as pdb name and 6th character
  # as chain identifier (contained in def column of the cla table).
  $sql = "INSERT INTO cavs.pmprospect2_scop " .
    " SELECT p.pmodel_id,c.sunid " .
    "FROM pmprospect2 p, cavs.cla c " .
    "WHERE p.porigin_id=porigin_id_lookup('Prospect2/SCOP'::text) AND " .
    "p.pmodel_id NOT IN (SELECT pmodel_id FROM pmprospect2_scop ) AND " .
    "char_length(trim(trailing '_' from  acc)) = 5 AND c.pdb=substr(p.acc,2,4)";
  printf STDERR "$sql\n" if $opts{verbose};
  $dbh->do( $sql );

  $sql = "INSERT INTO cavs.pmprospect2_scop " .
  "SELECT p.pmodel_id,c.sunid " .
  "FROM pmprospect2 p, cavs.cla c " .
  "WHERE p.porigin_id=porigin_id_lookup('Prospect2/SCOP'::text) AND " .
    "p.pmodel_id NOT IN (SELECT pmodel_id FROM pmprospect2_scop ) AND " .
    "c.pdb=substr(p.acc,2,4) AND " .
    "c.def ~ (upper(substr(p.acc,6,1)) || ':' )";
  printf STDERR "$sql\n" if $opts{verbose};
  $dbh->do( $sql );


  # load fssp domains by acc
  $sql = "INSERT INTO cavs.pmprospect2_scop " .
     "SELECT p.pmodel_id,c.sunid FROM pmprospect2 p, cavs.cla c WHERE " .
     "p.porigin_id=porigin_id_lookup('Prospect2/FSSP'::text) AND c.sid=rpad('d'||p.acc,7,'_')";
  printf STDERR "$sql\n" if $opts{verbose};
  $dbh->do( $sql );


  # load any remaining fssp domains by pdb. if acc has no chain identifier (i.e. 4 characters)
  # then match acc to pdb name.  otherwise, use first 4 characters as pdb name and 5 character
  # as chain identifier (contained in def column of the cla table).
  $sql = "INSERT INTO cavs.pmprospect2_scop " .
    " SELECT p.pmodel_id,c.sunid " .
    "FROM pmprospect2 p, cavs.cla c " .
    "WHERE p.porigin_id=porigin_id_lookup('Prospect2/FSSP'::text) AND " .
    "p.pmodel_id NOT IN (SELECT pmodel_id FROM pmprospect2_scop ) AND " .
    "char_length(p.acc) = 4 and c.pdb=p.acc";
  printf STDERR "$sql\n" if $opts{verbose};
  $dbh->do( $sql );

  $sql = "INSERT INTO cavs.pmprospect2_scop " .
  "SELECT p.pmodel_id,c.sunid " .
  "FROM pmprospect2 p, cavs.cla c " .
  "WHERE p.porigin_id=porigin_id_lookup('Prospect2/FSSP'::text) AND " .
    "p.pmodel_id NOT IN (SELECT pmodel_id FROM pmprospect2_scop ) AND " .
    "char_length(p.acc) = 5 AND c.pdb=substr(p.acc,1,4) AND " .
    "c.def ~ (upper(substr(p.acc,5,1)) || ':' )";
  printf STDERR "$sql\n" if $opts{verbose};
  $dbh->do( $sql );

  return;
}


#-------------------------------------------------------------------------------
# NAME: add_fk
# PURPOSE: add fks to scop tables
#-------------------------------------------------------------------------------
sub add_fk {
  my $dbh = shift;
  $dbh->do( 'ALTER TABLE ONLY cavs.pmprospect2_scop '.
      'ADD CONSTRAINT sunid_exists FOREIGN KEY (sunid) REFERENCES cavs.cla(sunid)' );
  return;
}


#-------------------------------------------------------------------------------
# NAME: drop_fk
# PURPOSE: drop fks to scop tables
#-------------------------------------------------------------------------------
sub drop_fk {
  my $dbh = shift;
  $dbh->do( 'ALTER TABLE ONLY cavs.pmprospect2_scop '.
      'DROP CONSTRAINT sunid_exists' );
  return;
}


#-------------------------------------------------------------------------------
# NAME: load_cla
# PURPOSE: load cla table from the dir.cavs.cla.txt file
#-------------------------------------------------------------------------------
sub load_cla {
  my ($dbh,$fn) = @_;
  my $fh = new IO::File;

  my $sql = 'truncate cavs.cla';
  printf STDERR "$sql\n" if $opts{verbose};
  $dbh->do( $sql );
  $sql = 'insert into cavs.cla (sid,pdb,def,sccs,sunid,cl,cf,sf,fa,dm,sp) ' .
    'values (?,?,?,?,?,?,?,?,?,?,?)';
  (my $sqlf = $sql) =~ s/\?/%s/g;
  $sqlf .= "\n";
  my $sth = $dbh->prepare( $sql );
  $fh->open("<$fn") || return undef;
  while(my $l = <$fh>) {
    next if $l =~ m/^\#/;
    my ($sid,$pdb,$def,$sccs,$px,$H) = split(' ',$l);
    my ($cl) = $H=~m/cl=(\d+)/;
    my ($cf) = $H=~m/cf=(\d+)/;
    my ($sf) = $H=~m/sf=(\d+)/;
    my ($fa) = $H=~m/fa=(\d+)/;
    my ($dm) = $H=~m/dm=(\d+)/;
    my ($sp) = $H=~m/sp=(\d+)/;

    printf STDERR ($sqlf,$sid,$pdb,$def,$sccs,$px,$cl,$cf,$sf,$fa,$dm,$sp) if $opts{verbose};
    $sth->execute($sid,$pdb,$def,$sccs,$px,$cl,$cf,$sf,$fa,$dm,$sp);
  }
  $fh->close();
  return 1;
}


#-------------------------------------------------------------------------------
# NAME: load_des
# PURPOSE: load des table from dir.cavs.des.txt file
#-------------------------------------------------------------------------------
sub load_des {
  my ($dbh,$fn) = @_;
  my $fh = new IO::File;

  my $sql = 'truncate cavs.des';
  printf STDERR "$sql\n" if $opts{verbose};
  $dbh->do( $sql );
  $sql = 'insert into cavs.des (sunid,level,sccs,sname,descr) values (?,?,?,?,?)';
  (my $sqlf = $sql) =~ s/\?/%s/g;
  $sqlf .= "\n";
  my $sth = $dbh->prepare( $sql );
  $fh->open("<$fn") || return undef;
  while(my $l = <$fh>) {
    next if $l =~ m/^\#/;
    chomp $l;
    my ($sunid,$lvl,$sccs,$sname,$descr) = split(' ',$l,5);
    $sname = ($sname eq '-' ) ? 'NULL' : $sname;

    printf STDERR ($sqlf,$sunid,$lvl,$sccs,$sname,$descr) if $opts{verbose};
    $sth->execute($sunid,$lvl,$sccs,$sname,$descr);
  }
  $fh->close();
  print("\\.\n") if $opts{acavsy};
  return 1;
}


#-------------------------------------------------------------------------------
# NAME: load_hie
# PURPOSE: load hie table from dir.cavs.hie.txt file
#-------------------------------------------------------------------------------
sub load_hie {
  my ($dbh,$fn) = @_;
  my $fh = new IO::File;

  my $sql = 'truncate cavs.hie';
  printf STDERR "$sql\n" if $opts{verbose};
  $dbh->do( $sql );
  $sql = 'insert into cavs.hie (sunid,psunid,children) values (?,?,?)';
  (my $sqlf = $sql) =~ s/\?/%s/g;
  $sqlf .= "\n";
  my $sth = $dbh->prepare( $sql );
  $fh->open("<$fn") || return undef;
  while(my $l = <$fh>) {
    next if $l =~ m/^\#/;
    chomp $l;
    my ($sunid,$psunid,$children) = split(' ',$l,3);
    $psunid = $psunid eq '-' ? 'NULL' : $psunid;
    $children = $children eq '-' ? '{}' : "{$children}";

    printf STDERR ($sqlf,$sunid,$psunid,$children) if $opts{verbose};
    $sth->execute($sunid,$psunid,$children);
  }
  $fh->close();
  return 1;
}
