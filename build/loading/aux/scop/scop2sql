#!/usr/bin/env perl
# scop2sql -  generate SQL COPY from SCOP cla, des, and hie files
# usage:
# scop2sql [-n] [-C] [-c clafn] [-d desfn] [-h hiefn] | psql -qaf-
# -c, -d, -h may be specified in combination


use strict;
use warnings;
use IO::File;
use Getopt::Long qw(:config gnu_getopt);

my %opts = (
			create => 0,
			cla => undef,
			com => undef,
			des => undef,
			hie => undef,
			namespace => 'scop',
		   );
GetOptions( \%opts,
			'create|C+',
			'cla|c=s',
			# 'com=s',   # currently ignored
			'des|d=s',
			'hie|h=s',
			'namespace|schema|n=s',
		  )
  || die("usage\n");

(defined $opts{cla} and -f $opts{cla})
  || die("must provide valid --cla argument\n");
(defined $opts{des} and -f $opts{des})
  || die("must provide valid --des argument\n");
(defined $opts{hie} and -f $opts{hie})
  || die("must provide valid --hie argument\n");


print <<EOSQL;
SET search_path = $opts{namespace};
BEGIN;
EOSQL

if ($opts{create}) {
  print while (<DATA>);
} else {
  print <<EOSQL;
TRUNCATE dom;
TRUNCATE cla;
TRUNCATE des;
TRUNCATE hie;
EOSQL
}

cla2sql($opts{cla});
des2sql($opts{des});
hie2sql($opts{hie});

print <<EOSQL;
COMMIT;
ANALYZE cla;
ANALYZE dom;
ANALYZE des;
ANALYZE hie;
EOSQL

exit(0);



sub cla2sql {
  my $fn = shift;
  my $fh = new IO::File;
  my %doms;
  my @cols = qw(sid pdb def sccs sunid cl cf sf fa dm sp);
  my $dest = sprintf("cla (%s)",
					 join(',',map {"\"$_\""} @cols));
  $fh->open("<$fn")
	|| die("$fn: $!");
  printf( "copy $dest from stdin;\n" );
  while (my $l = <$fh>) {
	next if $l =~ m/^\#/;
	my ($sid,$pdb,$def,$sccs,$px,$H) = split(' ',$l);
	my @domains = split(/\,/,$def);
	my ($cl) = $H=~m/cl=(\d+)/;
	my ($cf) = $H=~m/cf=(\d+)/;
	my ($sf) = $H=~m/sf=(\d+)/;
	my ($fa) = $H=~m/fa=(\d+)/;
	my ($dm) = $H=~m/dm=(\d+)/;
	my ($sp) = $H=~m/sp=(\d+)/;
	foreach my $d(@domains) {
	  my ($chain) = $d =~ m/(\w):.*/;
	  my ($start,$stop) = $d =~ m/\:(\d+)-(\d+)/;
	  my @sids = ($sid,$pdb,$chain);
	  push @sids, defined $_ ? $_ : '' foreach ($start,$stop);
	  push @{$doms{$sid}}, [@sids] if defined $chain;
	}
	print( join("\t", $sid, $pdb, $def, $sccs, $px,$cl,$cf,$sf,$fa,$dm,$sp),
	       "\n" );
  }
  $fh->close();
  print("\\.\n");

  my @dom_cols = qw(sid pdb chain start stop);
  my $dom_dest = sprintf("dom (%s)",
					 join(',',map {"\"$_\""} @dom_cols));
  printf( "copy $dom_dest from stdin with NULL AS '';\n" );
  foreach my $sid(sort keys %doms) {
    foreach my $d(@{$doms{$sid}}) {
      print( join ("\t", @{$d}),
	"\n" );
    }
  }
  print("\\.\n");
  return 1;
}


sub des2sql  {
  my $fn = shift;
  my $fh = new IO::File;
  my @cols = qw(sunid level sccs sname descr);
  my $dest = sprintf("des (%s)",
					 join(',',map {"\"$_\""} @cols));
  $fh->open("<$fn")
	|| die("$fn: $!");
  printf( "copy $dest from stdin;\n" );
  while (my $l = <$fh>) {
	next if $l =~ m/^\#/;
	chomp $l;
	my ($sunid,$lvl,$sccs,$sname,$descr) = split(' ',$l,5);
	print( join("\t", $sunid, $lvl, $sccs,
				($sname eq '-' ? '\N' : $sname), $descr),
		   "\n" );
  }
  $fh->close();
  print("\\.\n");
  return 1;
}


sub hie2sql {
  my $fn = shift;
  my $fh = new IO::File;
  my @cols = qw(sunid psunid children);
  my $dest = sprintf("hie (%s)",
					 join(',',map {"\"$_\""} @cols));
  $fh->open("<$fn")
	|| die("$fn: $!");
  printf( "copy $dest from stdin;\n" );
  while (my $l = <$fh>) {
	next if $l =~ m/^\#/;
	chomp $l;
	my ($sunid,$psunid,$children) = split(' ',$l,3);
	printf( "%s\t%s\t%s\n",
			$sunid,
			$psunid eq '-' ? '\N' : $psunid,
			$children eq '-' ? '\N' : "{$children}" );
  }
  $fh->close();
  print("\\.\n");
  return 1;
}



__DATA__
CREATE TABLE des (
    sunid integer NOT NULL PRIMARY KEY,
    "level" text NOT NULL,
    sccs text NOT NULL,
    sname text,
    descr text NOT NULL
) WITHOUT OIDS;

REVOKE ALL ON TABLE des FROM PUBLIC;
GRANT SELECT ON TABLE des TO PUBLIC;
GRANT INSERT,UPDATE ON TABLE des TO loader;

COMMENT ON TABLE des IS 'SCOP domain descriptions (http://scop.berkeley.edu/)';



CREATE TABLE cla (
    sunid integer NOT NULL PRIMARY KEY,
    sid text NOT NULL,
    pdb character(4) NOT NULL,
    def text NOT NULL,
    sccs text NOT NULL,
    cl integer NOT NULL,
    cf integer NOT NULL,
    sf integer NOT NULL,
    fa integer NOT NULL,
    dm integer NOT NULL,
    sp integer NOT NULL
) WITHOUT OIDS;

ALTER TABLE scop.cla ADD CONSTRAINT scop_cla_sid_unique UNIQUE(sid);

CREATE INDEX cla_pdb ON cla USING btree (pdb);
CREATE INDEX cla_sid ON cla USING btree (sid);
CREATE INDEX cla_sccs ON cla USING btree (sccs);

REVOKE ALL ON TABLE cla FROM PUBLIC;
GRANT SELECT ON TABLE cla TO PUBLIC;
GRANT INSERT,UPDATE ON TABLE cla TO loader;

COMMENT ON TABLE cla IS 'SCOP domain classification (http://scop.berkeley.edu/)';

CREATE TABLE dom (
  sid text NOT NULL, 
  pdb character(4) NOT NULL, 
  chain character(1) NOT NULL, 
  start integer,
  stop integer
) WITHOUT OIDS;

CREATE INDEX dom_pdb ON dom USING btree (pdb);
CREATE INDEX dom_sid ON dom USING btree (sid);

REVOKE ALL ON TABLE dom FROM PUBLIC;
GRANT SELECT ON TABLE dom TO PUBLIC;
GRANT INSERT,UPDATE ON TABLE dom TO loader;

CREATE TABLE hie (
    sunid integer NOT NULL PRIMARY KEY,
    psunid integer,
    children integer[]
) WITHOUT OIDS;

REVOKE ALL ON TABLE hie FROM PUBLIC;
GRANT SELECT ON TABLE hie TO PUBLIC;
GRANT INSERT,UPDATE ON TABLE hie TO loader;

CREATE INDEX hie_psunid ON hie USING btree (psunid);

COMMENT ON TABLE hie IS 'SCOP node hierarchy (http://scop.berkeley.edu/)';
