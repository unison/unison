#!/usr/bin/env perl
# load-speclist -- load UniProt species list into Unison

use warnings;
use strict;
use Unison;
use Unison::Exceptions;
use Data::Dumper;

my $u = new Unison( );
my $dep = $u->prepare_cached("update tax.spspec set gs=gs||' [deprecated]',latin=latin||' [deprecated]' where tax_id=?");
my $upd = $u->prepare_cached('update tax.spspec set k=?,gs=?,latin=?,common=?,synonyms=? 
								where tax_id=? and not (k=? and gs=? and latin=? and common=? and synonyms=?)');
my $ins = $u->prepare_cached('insert into tax.spspec (k,gs,latin,common,synonyms,tax_id) values (?,?,?,?,?,?)');


my $go = 0;
my $id;
my %recs;									# $recs{tax_id}{<key>}
while( my $line = <> ) {
  if (!$go) {
	$go++ if $line =~ m/^__/;
	next;
  }

  ## ABSGL E   4829: N=Absidia glauca
  ##                 C=Pin mould
  ## ABUPI E 211679: N=Aburria pipile
  ##                 C=Common piping guan
  ##                 S=Trinidad piping guan
  ## ABUSA E  50731: N=Abudefduf saxatilis
  ##                 C=Sergeant major

  ## Group multiple lines like those above into a single data structure
  ## for the species: 5letter, tax_id, kingdom, latin, common, and
  ## synonyms.  There may be more than one common name or synonyms for
  ## each species.
  chomp($line);
  if ( $line =~ m/^(\w+) \s+ ([ABEVP]) \s+ (\d+)[:;] \s N=(.*)/x ) {
	$id = $3;
	if (exists $recs{$id}) {
	  warn("$.: $line: duplicate tax_id\n");
	  undef $id;
	  next;
	}
	$recs{$id}{gs} = $1;
	$recs{$id}{k} = $2;
	$recs{$id}{tax_id} = $3;
	$recs{$id}{latin} = $4;
  } elsif ( $line =~ m/C=(.*)/ ) {
	die("$.: $line: tax_id not defined\n") unless defined $id;
	push( @{$recs{$id}{common}}, $1 );		# more than one CN?
  } elsif ( $line =~ m/S=(.*)/ ) {
	die("$.: $line: tax_id not defined\n") unless defined $id;
	push( @{$recs{$id}{synonyms}}, $1 );
  } elsif ( $line =~ m/^\s*$/ ) {			# empty line; exit and ignore rest
	last;
  } else {
	die("missed $.: $line");
  }
}


my @cur_ids = sort {$a<=>$b} keys %recs;
my @uni_ids = map {@$_} @{ $u->selectall_arrayref("select tax_id from tax.spspec where latin !~ '\\\\[deprecated\\\\]'") };
my %uni_ids = map {$_=>1} @uni_ids;

my @dep_ids = grep {not exists $recs{$_}} @uni_ids;
my @upd_ids = grep {    exists $uni_ids{$_}} @cur_ids;
my @ins_ids = grep {not exists $uni_ids{$_}} @cur_ids;

printf(STDERR "# in: %d unison tax_ids, %d current ids => %d dep, %d upd, %d ins\n",
	   $#uni_ids+1, $#cur_ids+1,
	   $#dep_ids+1, $#upd_ids+1, $#ins_ids+1);


for(my $i=0; $i<=$#cur_ids; $i++) {
  my $tax_id = $cur_ids[$i];
  my $rec = $recs{$tax_id};
  $rec->{common} = exists $rec->{common} ? join('; ',sort @{$rec->{common}}) : undef;
  $rec->{synonyms} = exists $rec->{synonyms} ? join('; ',sort @{$rec->{synonyms}}) : undef;
}


$u->begin_work();

try {
  # 1. deprecate old entries
  for(my $i=0; $i<=$#dep_ids; $i++) {
	my $tax_id = $dep_ids[$i];
	$dep->execute($tax_id);
	print(STDERR "deprecated tax_id $tax_id\n");
  }

  # 2. update potentially changed entries
  for(my $i=0; $i<=$#upd_ids; $i++) {
	my $tax_id = $upd_ids[$i];
	my %rec = %{ $recs{$tax_id} };
	my @args = map {$rec{$_}} qw(k gs latin common synonyms);
	my @pargs = map {defined $_ ? $_ : 'undef'} @args;
	my ($nr) = $upd->execute(@args,$rec{tax_id},@args);
	print(STDERR "update ($rec{tax_id} @pargs) [$nr]\n") if $nr+0;
  }

  # 3. insert new entries
  for(my $i=0; $i<=$#ins_ids; $i++) {
	my $tax_id = $ins_ids[$i];
	my %rec = %{ $recs{$tax_id} };
	my @args = map {$rec{$_}} qw(k gs latin common synonyms);
	my @pargs = map {defined $_ ? $_ : 'undef'} @args;
	my ($nr) = $ins->execute(@args,$rec{tax_id});
	print(STDERR "insert ($rec{tax_id} @pargs) [$nr]\n") if $nr;
  }

} catch Unison::Exception with {

  my $ex = shift;
  if ($ex->error() =~ m/duplicate key/) {
	warn($ex);
  } else {
	die($ex);
  }

};


$u->commit();
