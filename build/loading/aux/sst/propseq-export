#!/bin/sh -e
#
# xlink-dump -- dump rudimentary Unison data as sqlplus/sqlldr script
#
# This script connects to a Unison database and dumps pseq and alias
# information. This is intended to be loaded into other databases in order
# to facilitate linking from those databases to Unison.
#
# usage: ORAPASS=/pass xlink
#

LOGIN=unison$ORAPASS@biodev1
DESCR_SIZE=200
TRUNCATED='... [truncated by xlink]'


if [ -z "$PSEQ_LIMIT" ]; then
	PSEQ_LIMIT=
	#PSEQ_LIMIT='where pseq_id<=30' #testing
fi

if [ -n "$XLINK_DIR" ]; then
	# user provided an XLINK_DIR in the env.
	CREATE=${CREATE:-0}
	LOAD=${LOAD:-1}
else
	# user didn't provide XLINK_DIR; create and load (unless set)
	CREATE=1
	LOAD=${LOAD:-1}
	XLINK_DIR="/tmp/xlink-$$"
	mkdir -p "$XLINK_DIR"
fi

echo '# $Id: xlink,v 1.8 2004/05/07 20:20:36 rkh Exp $' 1>&2
echo '# started' `date "+%Y-%m-%d %H:%M:%S"` 1>&2
echo "# XLINK_DIR=$XLINK_DIR; CREATE=$CREATE; LOAD=$LOAD" 1>&2
echo "# PSEQ_LIMIT=$PSEQ_LIMIT" 1>&2


tables_sql="$XLINK_DIR/tables.sql"
pseq_ctl="$XLINK_DIR/pseq.ctl"
pseq_dat="$XLINK_DIR/pseq.dat"
pseq_log="$XLINK_DIR/pseq.log"
pseq_bad="$XLINK_DIR/pseq.bad"
aliases_ctl="$XLINK_DIR/aliases.ctl"
aliases_dat="$XLINK_DIR/aliases.dat"
aliases_log="$XLINK_DIR/aliases.log"
aliases_bad="$XLINK_DIR/aliases.bad"

truncated_len=`/bin/echo -n "$TRUNCATED" | wc -c`
descr_max=`echo $DESCR_SIZE-$truncated_len | bc`


if [ "$CREATE" = 1 ]; then
	echo "# creating table-building SQL..." 1>&2
	cat <<EOSQL >$tables_sql
drop table pseq cascade constraints;
create table pseq (
	pseq_id integer primary key,
	md5 char(32) not null,
	len integer not null
);
GRANT SELECT ON pseq TO PUBLIC;
COMMENT ON TABLE pseq IS 'summary sequence information from Unison';
create unique index pseq_md5_idx on pseq(md5);
create index pseq_len_idx on pseq(len);


drop table aliases cascade constraints;
create table aliases (
	pseq_id integer not null, -- references pseq(pseq_id),
    ann_pref integer,
	origin char(30) not null,
	alias char(50) not null,
	descr char($DESCR_SIZE),
	gs char(20)
);
GRANT SELECT ON aliases TO PUBLIC;
COMMENT ON TABLE aliases IS 'aliases for identical sequences (pseq_ids) from Unison';
create index aliases_pseq_id_idx on aliases(pseq_id,ann_pref);
create index aliases_alias_idx on aliases(alias);
create index aliases_origin_alias_idx on aliases(origin,alias);
create index aliases_gs_idx on aliases(gs);


CREATE OR REPLACE VIEW dv_pro_pseq AS
SELECT
	TO_NUMBER(SUBSTR(alias,4)) AS "PROID",
	aliases.pseq_id,
	md5,
	len
FROM aliases, pseq
WHERE
	origin='SPDI' AND alias NOT LIKE '%\_%' ESCAPE '\'
	AND aliases.pseq_id=pseq.pseq_id;
GRANT SELECT ON dv_pro_pseq TO PUBLIC;
COMMENT ON TABLE pro_pseq IS 'def view: proid <-> pseq_id mapping with md5s';


DROP TABLE pro_pseq;
CREATE TABLE pro_pseq AS SELECT * FROM dv_pro_pseq;
CREATE INDEX pro_pseq_proid on pro_pseq(proid);
CREATE INDEX pro_pseq_pseq_id on pro_pseq(pseq_id);
CREATE INDEX pro_pseq_md5 on pro_pseq(md5);
GRANT SELECT ON pro_pseq TO PUBLIC;
COMMENT ON TABLE pro_pseq IS 'proid <-> pseq_id mapping with md5s; see dv_pro_pseq';


quit
EOSQL

	echo -n '# fetching pseq... ' 1>&2
	psql -tAF'	' -c "select pseq_id,len,md5 from pseq $PSEQ_LIMIT" >"$pseq_dat"
	echo `wc -l <"$pseq_dat"` records 1>&2
	cat <<EOLDR1 >"$pseq_ctl"
load data
infile "$pseq_dat"
append into table pseq
fields terminated by '	'
(pseq_id, len, md5)
EOLDR1
	

	echo -n '# fetching aliases... ' 1>&2
	psql -tAF'	' -c "SELECT pseq_id,ann_pref,origin,alias,CASE WHEN LENGTH(descr)>$DESCR_SIZE THEN SUBSTR(descr,1,$descr_max)||'$TRUNCATED' ELSE descr END as \"descr\",CASE WHEN gs IS NULL THEN 'NULL' ELSE gs END AS \"gs\" from v_aliases $PSEQ_LIMIT" >"$aliases_dat"
	echo `wc -l <"$aliases_dat"` records 1>&2
	cat <<EOLDR1 >"$aliases_ctl"
load data
infile "$aliases_dat"
append into table aliases
fields terminated by '	'
(pseq_id,ann_pref,origin,alias,descr,gs)
EOLDR1

fi								# end CREATE=1



if [ "$LOAD" = 1 ]; then
	echo "# dropping & creating pseq & aliases tables..." 1>&2
	sqlplus "$LOGIN" "@$tables_sql" 1>/dev/null 2>/dev/null

	echo "# loading pseq..." 1>&2
	/bin/rm -f "$pseq_log" "$pseq_bad"
	sqlldr "$LOGIN" control="$pseq_ctl" log="$pseq_log" bad="$pseq_bad" >/dev/null
	/bin/touch "$pseq_log" "$pseq_bad"
	/bin/wc -l "$pseq_dat" "$pseq_bad" "$pseq_log" 1>&2

	echo '# loading aliases...' 1>&2
	/bin/rm -f "$aliases_log" "$aliases_bad"
	sqlldr "$LOGIN" control="$aliases_ctl" log="$aliases_log" bad="$aliases_bad" >/dev/null
	/bin/touch "$aliases_log" "$aliases_bad"
	/bin/wc -l "$aliases_dat" "$aliases_bad" "$aliases_log" 1>&2
fi								# LOAD=1


echo '# finished' `date "+%Y-%m-%d %H:%M:%S"` 1>&2
