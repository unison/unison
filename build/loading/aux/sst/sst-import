#!/usr/bin/env perl
# This script writes a file which loads Unison's mirror of the sst
# unqproform (sic) table

use strict;
use warnings;
use DBI;

my %opts =
  (
   verbose => 1,
  );

my @table_defs =
  (
   [ 'unqpro', 		'unqproform', 	[qw(unqid proid)] 					],
   [ 'prodna', 		'prodna',	 	[qw(proid dnaid)] 					],
   [ 'fam',    		'fam', 		 	[qw(famid familyname shortname)] 	],
   [ 'unqfamily',	'unqfamily',	[qw(unqid famid)] 					],
  );


select(STDERR); $|++;
select(STDOUT); $|++;
print(STDERR '$Id: sst-import,v 1.5 2005/04/04 16:44:57 rkh Exp $ ', "\n");

#(defined $ENV{SSTPASS})
#  || die("$0: SSTPASS not defined\n");

my $sql;
my $sth;
my $dsn = 'dbi:Oracle:bioprd1';
my $dbh = DBI->connect($dsn) #, 'rkh', $ENV{SSTPASS}) 
  || die("connect($dsn) failed: ", $DBI::errstr, "\n");


for(my $ti=0; $ti<=$#table_defs; $ti++) {
  my ($utable,$otable) = @{$table_defs[$ti]};
  my (@cols) = @{$table_defs[$ti]->[2]};
  my $cols = join(',',@cols);
  my $msg = "preparing table sst.$utable";
  my $sql = "select $cols from $otable";
  my $n = 0;

  print(STDERR "# $utable: $sql\n");

  print("TRUNCATE sst.$utable;\n");
  print("COPY sst.$utable ($cols) FROM stdin;\n");

  $sth = $dbh->prepare($sql);
  $sth->execute()
	|| die("$sql: ", $dbh->errstr());
  while( my @row = $sth->fetchrow_array() ) {
	$n++;
	print( join("\t", map {sql_escape($_)} @row), "\n" );
	print(STDERR "\r$msg: $n rows") if $opts{verbose} and $n % 1000 == 0;
  }
  print("\\.\n");
  print(STDERR "\r$msg: $n rows\n") if $opts{verbose};
}



#################################################################333
## INTERNALS

sub sql_escape() {
  my $v = shift;

  if (not defined $v) {
	return '\N';
  }

  $v =~ s/\t/\\t/g;
  $v =~ s/\n/\\n/g;
  return $v;
}
