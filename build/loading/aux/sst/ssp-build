#!/usr/local/tools/bin/perl
# ssp-build -- build a fasta file of spdi sequences to load into Unison
# MUST BE RUN ON GENELAND


use strict;
use warnings;
use DBI;

print(STDERR '$Id: ssp-build,v 1.7 2004/12/24 00:09:54 rkh Exp $ ', "\n");


my %wanted_dnaids;
$fn = 'wanted.dnaids';
if (-f $fn) {
  open(F,"<$fn")
	|| die("$fn: $!\n");
  %wanted_dnaids = map { chomp; $_=~s/^DNA//; $_=>1 } (<F>);
  close(F);
  printf(STDERR "# restricting to %d DNA ids (%s...)\n", 
		 scalar keys %wanted_dnaids,
		 join(',',(sort keys %wanted_dnaids)[0..3]) );
}



# @GB: list of GENERATED_BY values which we'll load into Unison
# 'GB is NULL' is explicitly included in the query below
my @GB = 
  (
   'Virtual',
   'Fragment',
   'OrigeneFLS',
   'Full Length Screen',
   'Gene Exons',
   'Genomic Celera',
   'PatinUpload',
   'Genomic NCBI',
   'Predicted Celera',
   'Incyte',
   'Predicted NCBI',
  );

my $fn;




# connection now uses ops$ connections (essentially, localhost IDENT)
# and does not require a password. MUST BE RUN ON GENELAND.
#(defined $ENV{SSTPASS})
#  || die("$0: rkh's SSTPASS not defined\n");
my $dsn = 'dbi:Oracle:bioprd1';
my $dbh = DBI->connect($dsn, '/',)
  || die("connect($dsn) failed: ", $DBI::errstr, "\n");

# this is the getseq pipe which will extract sequences (slowly... yawn)
open(GS, "| xargs -tn100 /usr/local/seq/bin/getseq -F")
  || die("couldn't getseq pipe: $!\n");


my $sql = 
  "SELECT DISTINCT D.dnaid,proid FROM dna D,prodna PD\n"
  ." WHERE D.dnaid=PD.dnaid\n AND ("
  .join("  \n or ", 'D.generatedby IS NULL', map {"D.generatedby='$_'"} @GB)
  .') ORDER BY proid';
warn("# $sql\n");


my @rows = @{$dbh->selectall_arrayref($sql)};
my $N = $#rows+1;
printf(STDERR "# %d rows returned\n", $N);
if (%wanted_dnaids) {
  @rows = grep {exists $wanted_dnaids{$_->[0]}} @rows;
  printf(STDERR "# %d rows remain after dnaid restriction\n", $#rows+1);
}
my %proids = map {$_->[1] => 1} @rows;
my @proids = keys %proids;
printf(STDERR "# %d proids selected\n", $#proids+1);

print(GS map {"ssp.PRO$_\n"} @proids);
close(GS);

printf(STDERR "# Done\n");

exit;




__END__
rkh@bioprd1> select generatedby,count(distinct proid)
          -> from dna D,prodna PD where D.dnaid=PD.dnaid
          -> group by generatedby order by 2 desc;

GENERATEDBY            COUNT(DISTINCTPROID)
---------------------- --------------------
Virtual                               56560 *
Fragment                              24593 *
OrigeneFLS                            20027 *
Full Length Screen                    19972 *
Gene Exons                             8294 *
Genomic Celera                         8026 *
Construct                              5076
Hybridoma                              3211
PatinUpload                            2635 *
IMGT                                    544
Amylase Screen                          156
Genomic NCBI                             64
Predicted Celera                         54
GEPIS Screen                             49
ECD Homology                             40
Signal Algorithm                         18
NULL                                     18
ECD H Genomic                            14
Collaboration                            12
Sig Genomic                              12
Bar1 Screen                              11
HMM Homology                              9
HMM Signal Pep                            8
Incyte                                    6
Origene Virtual                           6
Other Secretion Screen                    3
Predicted NCBI                            3
Amylase Virtual                           2
Marker Virtual                            2
Invertase Screen                          2
Bar1 Virtual                              1
Curagen                                   1
Genomic Cloned                            1
Cluster                                   1
