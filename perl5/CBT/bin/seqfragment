#!/usr/bin/env perl

=head1 NAME

seqfragment -- fragment sequences from a fasta file
S<$Id: seqfragment,v 1.4 2004/05/31 05:34:49 rkh Exp $>

=head1 SYNOPSIS

seqfragment [opts] <in.fasta >out.fasta

=head1 DESCRIPTION

B<seqfragment> fragment sequences from a fasta file into multiple
subsequences of specified length and overlap (or offset).

=head1 OPTIONS AND ARGUMENTS

=over

=item B<-l> n, B<--length> n

fragment sequences into subsequences of length n (n>0)

=item B<-v> n, B<--overlap> n

overlap subsequences by n residues (default = 0)

=item B<-o> n, B<--offset> n

offset subsequences by n residues (instead of specifying overlap).  If
offset is greater than length, skip gaps will be created between
subsequences.

=item B<-z>, B<--zero>

begin I<residue> numbering at zero (default is to start at 1)

=item B<-i> n, B<--id-format> n

use one of the following id tag formats for fasta sequence identifiers:

	1   id -> id[b:e] /fragment=<n>/<N> /len=<len>
	2   id -> idN /coordinates=[b:e] /len=<len>

=item B<-V>, B<--constant-overlap>

=back

=cut


use strict;
use warnings;
use Getopt::Long qw(:config gnu_getopt);
use Bio::SeqIO;
use Bio::Seq;
use Pod::Usage;

my %opts =
  (
   # not implemented: 'constant-length' => 1,
   'constant-overlap' => 0,
   'end-fragment' => undef,
   'id-format' => 1,
   'length' => undef,
   'offset' => undef,
   'overlap' => 0,
   'quartile' => undef,
   'start-fragment' => 1,
   'zero' => 0,

   'debug' => 0,
   'help' => 0,
   'verbose' => 0,
   );


print(STDERR '# $Id: seqfragment,v 1.4 2004/05/31 05:34:49 rkh Exp $ ', "\n");

GetOptions(
		   \%opts,

		   'debug+',
		   'help+',
		   'quiet|q+',
		   'verbose+',

		   # not implemented: 'constant-length|L',
		   'constant-overlap|V',
		   'end-fragment|F=i',
		   'id-format|i=i',
		   'length|l=i',
		   'offset|o=i',
		   'overlap|v=i',
		   'quartile|Q=i',
		   'start-fragment|f=i',
		   'zero|z',
		  )
  || die("$0: bad usage; try --help\n");

$opts{help}
  && pod2usage( { -verbose => 2 } );

# sanity checks
(defined $opts{length})
  || die("$0: length not defined\n");
($opts{length} > 0)
  || die("$0: length must be > 0\n");
($opts{overlap} >= 0)
  || die("$0: overlap must be >= 0\n");
($opts{overlap} < $opts{length})
  || die("$0: overlap must be less than sequence length\n");
if (not defined $opts{offset})
  { $opts{offset} = $opts{length} - $opts{overlap}; }
($opts{offset} > 0)
  || die("$0: offset must be > 0\n");
if (defined $opts{quartile}) {
  ($opts{quartile} =~ m/^[1234]$/)
	|| die("$0: quartile ($opts{quartile}) must be in {1,2,3,4}\n");
  (defined $opts{'start-fragment'} or defined $opts{'end-fragment'})
	|| die("$0: can't define quartile and start- or end-fragment\n");
}


# setup
my $seqi = new Bio::SeqIO( -format => 'fasta', -fh => *STDIN );
my $seqo = new Bio::SeqIO( -format => 'fasta', -fh => *STDOUT );
my $offset = $opts{offset};
my $len = $opts{length};
$opts{zero} = 1-$opts{zero};
if ($opts{debug}) {
  printf(STDERR "# length=%d, overlap=%d, offset=%d\n",
		 @{%opts}{qw(length overlap offset)});
}


# process sequences
while( my $bs = $seqi->next_seq() ) {
  my $seq = $bs->seq();
  my $l0 = length($seq);
  my $id = $bs->display_id();
  my $totfrags = $l0 / ($opts{'length'}-$opts{'overlap'}) + 1;
  my $e = 0;

  if (defined $opts{'quartile'}) {
	my $nper = $totfrags / 4;
	$opts{'start-fragment'} = ($opts{'quartile'}-1) * $nper + 1;
	$opts{'end-fragment'}   =  $opts{'quartile'}    * $nper;
	$opts{'start-fragment'} = int( $opts{'start-fragment'} + 0.5 );
	$opts{'end-fragment'} = int( $opts{'end-fragment'} + 0.5 );
  }

  $opts{'end-fragment'} = $totfrags unless defined $opts{'end-fragment'};

  # this estimate isn't quite right... I'll work out the closed-form later
  my $nfrags = $opts{'end-fragment'} - $opts{'start-fragment'} + 1;

  if ($opts{debug}) {
	printf(STDERR "totfrags=%d, %d..%d (nfrags=%d)\n",
		   $totfrags, @opts{qw(start-fragment end-fragment)}, $nfrags);
	printf(STDERR "%2s %-30.30s %3s:%3s %3s %s\n",
		   '','','b','e','l',('0    5    'x6));
	printf(STDERR     "%2s %30s %3d:%3d %3d %s\n",
		   'i', 'in ->', 0, $l0-1, $l0, $seq);
  }

  # $i is 0-based index of sequence fragment
  # start- and end-fragment are 1-based!
  for( my $i=$opts{'start-fragment'}-1;
	   $i<=$opts{'end-fragment'}-1 and $e<$l0-1;
	   $i++ ) {
	my $b = $i * $offset;
	$e = $b + $len - 1;
	if ($e > $l0-1) {
	  if ($opts{'constant-overlap'}) {
		$e = $l0-1;
	  } else {
		$b = $l0-$len > 0 ? $l0-$len : 0;  $e = $l0-1; 
	  }
	}
	my $l = $e-$b+1;
	my $bsfrag = new Bio::Seq( -seq => substr($seq,$b,$l) );
	annotate_seq($bsfrag,\%opts,$id,$i+1,$b,$e,$l);
	if ($opts{debug}) {
	  printf(STDERR "%2d %-30.30s %3d:%3d %3d %s\n",
			 $i+1, $bsfrag->display_id() . ' (' . $bsfrag->desc() . ')',
			 $b,$e,$l,' 'x$b . $bsfrag->seq());
	}
	$seqo->write_seq($bsfrag);

	if ($opts{verbose}) {
	  my $ndone = $i-($opts{'start-fragment'}-1)+1;
	  printf(STDERR "# %7d/%7d %5.1f%%: fragment:%7d/%7d; id:%s\n",
			 $ndone, $nfrags, $ndone/$nfrags*100,
			 $i+1, $totfrags,
			 $bsfrag->display_id());
	}
  }
}

exit(0);



sub annotate_seq {
  my ($s,$options,$id,$i,$b,$e,$l) = @_;
  $b += $opts{zero};
  $e += $opts{zero};
  if ($opts{'id-format'} == 1) {
	$s->display_id("$id\[$b:$e]"); 
  } elsif ($opts{'id-format'} == 2) {
	$s->display_id("${id}_$i"); 
  }
  $s->desc("/coords=[$b:$e] /fragment=$i /len=$l");
  return $s;
}


=pod

=head1 BUGS

I'm (like so) sure.

=head1 SEE ALSO

=head1 AUTHOR

 Reece Hart, Ph.D.                     rkh@gene.com, http://www.gene.com/
 Genentech, Inc.                       650/225-6133 (voice), -5389 (fax)
 Bioinformatics Department             
 1 DNA Way, MS-93                      http://www.in-machina.com/~reece/
 South San Francisco, CA  94080-4990   reece@in-machina.com, GPG: 0x25EC91A0

=cut

