#!/usr/bin/env perl
# ss2fa -- convert ss or p1 files to fasta
# $Id$
#
# usage:
# ss2fa [ss-or-p1-files] >out.fa
#
# This program makes a mild effort to extract meaningful tags from ss/p1
# files, but this is not trivial.


use warnings;
use strict;
use IO::File;

my $jemappelle = $0;  $jemappelle =~ s%^.+/%%;
my $fh = new IO::File;						# global, for better speed


unshift(@ARGV, '-') unless @ARGV;			# read from stdin unless filename given


while ( @ARGV ) {
  my $fn = shift;
  my ($seq, $tag) = read1($fn,$fh);

  if (not defined $seq)	{
	warn("$fn: $!\n"); next;
  }

  if (not defined $tag)	{
	$tag = $fn;
  }

#  $tag =~ s%^.+/%%;
  $tag =~ s%\.p1%%;
#  $tag .= ' [' . length($seq) . ' ' . ($fn=~/\Wss\W/?'NA':'AA') . ']';

  print( join("\n", ">$tag  # converted by $jemappelle", wrap($seq)), "\n" );
  }




# read1: read one sequence from one ss or p1 file
# in: filename (may be - for stdin)
# out: ($seq, $tag)
# $seq is undef if err (and $! will be set)
# $tag is a heuristic attempt to grok ids from the input, but MAY BE UNDEF
sub read1 {
  my $fn = shift;
  my $fh = shift || new IO::File;
  my $seq = '';
  my $tag;
  my $tag1;
  my $tag2;

  return unless $fh->open("<$fn");

  while( <$fh> ) {
	if (m/^[<>]/) {
	  if ( (not defined $tag1)				# snarf first DNA\d+ or PRO\d+
		   and ( m/((?:DNA|PRO)\d+.*\[(?:min|full)\].*)/ ) ) {	# as tag
		$tag1 = $1;
	  }
	  if ( not defined $tag2				# also keep initial >tag line
		   and ( m/^>(\S+)/ ) )	{			# as from affy sequences
		$tag2 = $1;
	  }
	} else {
	  $seq .= $_;
	}
  }

  $seq =~ s/\s+//g;

  $tag = $tag1 || $tag2;					# prefer tag1, but tag2 okay
  return ( $seq , $tag );

  # $fh may be closed by falling out of scope
}


# wrap -- line wrap a long sequence string
# no point in importing Text::Wrap just for this
# in: sequence (scalar), width
# out: array of lines (len < $width)
sub wrap {
  my $seq = shift;
  my $width = shift || 60;
  my (@lines) = ();
  while ( length($seq) > 0 ) {
	push( @lines, substr($seq,0,$width,''));
  }
  return ( @lines );
}
