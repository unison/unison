#!/usr/bin/perl

use strict;
use warnings;
use DBI;
use Net::DNS;
use Term::ANSIScreen qw(:screen);


select STDERR; $|++;
select STDOUT; $|++;

my $schema = shift @ARGV;
die 'schema not defined' if not defined $schema;
die 'schema may contain only [-\\w]' if $schema =~ m/[^-\w]/;

my $res   = Net::DNS::Resolver->new;
$res->tcp_timeout(1);
$res->udp_timeout(1);

my $ip4re = qr/^\d+\.\d+\.\d+\.\d+$/;

# testing:
#foreach my $q (qw(gwiz harts.net 74.220.202.28
#				  0-1b-63-c6-15-2f.dynamic.ucsd.edu
#				  089-100-220154.ntlworld.ie 209.82.56.4)) {
#  printf( "$q: %s %s %s\n", map { (defined $_) ? $_ : 'NULL' } get_host_ip($q) );
#}
#die;


my $dbh = DBI->connect('dbi:Pg:', '', '',  # depends on PGHOST, PGDATABASE
					   { AutoCommit => 0, RaiseError => 1 }
					  );
$dbh->do(sprintf('set search_path = %s;', $schema));

my $sel_sth = $dbh->prepare('SELECT src FROM apache_log EXCEPT SELECT src FROM src_host_ip');
my $ins_sth = $dbh->prepare('INSERT INTO src_host_ip (src,host,ip,error) VALUES (?,?,?,?)');


$sel_sth->execute();
while ( my ($src) = $sel_sth->fetchrow_array ) {
  my ($host,$ip,$error) = get_host_ip($src);
  $ins_sth->execute($src,$host,$ip,$error);
  my $line = sprintf("%s -> (%s,%s,%s)", $src, $host||'NULL', $ip||'NULL', $error||'NULL');
  print(STDERR clline, $line, ((defined $error)?"\n":"\r"));
}
printf(STDERR "\n");
$dbh->commit();
$dbh->disconnect();

exit(0);



sub ip2host { 
  my ($q) = @_;
  my $type = 'PTR';
  my $packet =  $res->query($q,$type);
  if (not defined $packet) {
	return (undef,$res->errorstring);
  }
  my @rr = grep { $_->type eq $type } $packet->answer;
  if (not @rr) {
	return (undef,"No $type records for $q");
  }
 return ($rr[0]->ptrdname,undef);
}

sub host2ip { 
  my ($q) = @_;
  my $type = 'A';
  my $packet =  $res->query($q,$type);
  if (not defined $packet) {
	return (undef,$res->errorstring);
  }
  my @rr = grep { $_->type eq $type } $packet->answer;
  if (not @rr) {
	return (undef,"No $type records for $q");
  }
 return ($rr[0]->address,undef);
}

sub get_host_ip {
  my ($src) = @_;
  my ($host,$ip,$error);
  if ($src =~ m/$ip4re/) {
	$ip = $src;
	($host,$error) = ip2host($ip);
  } else {
	$host = $src;
	($ip,$error) = host2ip($host);
  }
  return ($host,$ip,$error);
}

