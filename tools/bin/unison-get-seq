#!/usr/bin/env perl
# get-seq -- retrieve sequences from unison
# $Id$

use warnings;
use strict;
use Unison;
use Getopt::Long qw(:config gnu_getopt);
use Data::Dumper;

my %options;
GetOptions( \%options,
			'best-alias|best-oa|a+',
			'best-annotation|best-oad|D+',
			'all-aliases|A+'
		  )
  || die("$0: you got usage issues, homey\n");

my $u = new Unison( username => 'PUBLIC' );
die( "! couldn't open a connection to unison\n" ) unless $u;


if (@ARGV)
  {
  while( my $r = shift )
	{ eval "process1(\$_) for $r" }
  }
else
  {
  while (my $id=<>)
	{ get1($id) }
  }

exit(0);

############################################################################

sub process1
  {
  my $pseq_id = shift;
  my $seq = get1($pseq_id);
  if (not defined $seq)
	{ warn("Unison:$pseq_id not found\n"); return; }
  print $seq;
  }

sub get1
  {
  my $pseq_id = shift;
  my @aliases;
  my $rv;
  my $seq = $u->get_sequence_by_pseq_id($pseq_id);
  if (not defined $seq)
	{ warn("pseq $pseq_id doesn't exist\n"); return; }
  if (defined $options{'best-alias'})
	{ (@aliases) = $u->best_alias($pseq_id) }
  elsif (defined $options{'best-annotation'})
	{ (@aliases) = $u->best_annotation($pseq_id) }
  elsif (defined $options{'all-aliases'})
	{ (@aliases) = $u->pseq_get_aliases($pseq_id) }
  $rv = join(' ',">Unison:$pseq_id",@aliases) . "\n";
  while( length($seq) )
	{ $rv .= substr($seq,0,60,'') . "\n"; }
  return $rv;
  }


=pod

=head1 NAME

get-seq -- retrieve sequences from Unison

S<$Id: pl,v 1.1 2000/08/14 02:33:02 reece Exp $>

=head1 SYNOPSIS

 get-seq [-a|-A|-D] [pseq_id ...]

=head1 OPTIONS

=item B<--alpha> level, B<--Arpha> level, B<-a> level

=head1 DESCRIPTION

B<get-seq> writes selected sequences from Unison in fasta format to
STDOUT, optionally with aliases or annotations.

=cut
