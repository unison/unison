#!/usr/bin/env perl

# unison-annotation -- output annotation from Unison
# $Id: unison-annotation,v 1.3 2005/12/23 22:13:49 mukhyala Exp $

=pod

=head1 NAME

B<unison-annotation> -- retrieve annotations from Unison
S<$Id: unison-annotation,v 1.3 2005/12/23 22:13:49 mukhyala Exp $>

=head1 SYNOPSIS

  unison-annotation 1234
  unison-annotation -A TNFA_HUMAN
  unison-annotation -F NP_004439
  unison-annotation -S seqs.fa
  unison-annotation 100-110

=head1 OPTIONS


unison-annotation [-S|-A|-F|-U  -s|-v  |--pfam|--signalp|--transmembrane|--localization  -h|-V]

               input choices
               -------------
 #1 by sequence as input(protein sequences only)
 unison-annotation -S <fasta file>
    or cat <fasta file> | unison-annotation -S
 #2 by an alias (protein accessions only)
 unison-annotation -A <alias>
    or echo <alias> | unison-annotation -A
 #3 by a fuzzy alias (protein accessions only)
 unison-annotation -F <fuzzy alias>
    or echo <fuzzy alias> | unison-annotation -F
 #4 by sequence id
 unison-annotation -U <pseq_id> (default)
    or echo <pseq_id> | unison-annotation -U
    or unison-annotation pseq_id
    or echo pseq_id | unison-annotation
    or unison-annotation <range>

               annotation choices
               --------------
 #1 specific annotation
 unison-annotation --pfam
 unison-annotation --signalp
 unison-annotation --localization
 unison-annotation --transmembrane
 #2 all annotations (default)
 unison-annotation ...

               output format choices
               --------------
 #1 summary (one line per protein)
 unison-annotation -s [-S|-A|-F|-U] <input>
 #2 detailed (default)
 unison-annotation [-S|-A|-F|-U] <input>
 #3 verbose
 unison-annotation -v [-S|-A|-F|-U] <input>
 #4 help and Version
 perldoc unison-annotation
 unison-annotation -V

=head1 DESCRIPTION

B<unison-annotation> outputs annotations from Unison in tabular format to
STDOUT

=cut

use warnings;
use strict;
use Bio::SeqIO;
use File::Temp qw(tempfile);
use Pod::Usage;
use Getopt::Long qw(:config gnu_getopt);
use Unison;

#also shows the program flow
sub parse_options();
sub map_args_to_pseq_ids($@);
sub get_data($);
sub show_results($$);

# connect with defaults. See Unison::DBI. Typically, the connection is made
# to the csb production host ('csb'), csb production database (also 'csb'),
# as a 'public' user
my $u = new Unison(username=>'PUBLIC');
(defined $u)
  || die( "! couldn't open a connection to unison\n" );

my %opts = parse_options();
if ( $opts{version} ) {
  print(STDERR '$Id: unison-annotation,v 1.3 2005/12/23 22:13:49 mukhyala Exp $ ', "\n");
  exit;
}
if ( $opts{help} ) {
  pod2usage( { -verbose=>2 } )
}


my @short_table_defs =
  (
   ['signalp','pfsignalpnn', [qw(signal_peptide)], 'SignalP 3.0 (euk)'],
   ['transmembrane','pftmhmm_tm_count_v', [qw(count)], 'TMHMM 2.0c'],
   ['localization','psprotcomp_reliable_v', [qw(loc)], 'protcomp default'],
   ['pfam','pahmm_v',[qw(name eval)], 'Pfam_ls 18.0', 'eval <= 1e-5']
  );

my @long_table_defs =
  (
   ['signalp','pfsignalpnn', [qw(start stop d_score signal_peptide)], 'SignalP 3.0 (euk)'],
   ['transmembrane','pftmhmm_tms_v', [qw(start stop type)], 'TMHMM 2.0c'],
   ['localization','psprotcomp_reliable_v', [qw(loc)], 'protcomp default'],
   ['pfam','pahmm_v',[qw(start stop ends score eval acc name descr)], 'Pfam_ls 18.0', 'eval <= 1e-5']
  );

# args from command line or stdin, but not both
my (@args) = @ARGV ? @ARGV : map {chomp; $_} <>;
@args = map_args_to_pseq_ids( \%opts, @args );
my @outcols = map {$_->[0]} @short_table_defs;
my $optsum = eval join('+', map {$opts{$_}?1:0} @outcols);


#create the right column headers for --summary option
if($opts{summary}) {
  if($optsum) {
    undef @outcols;
    foreach (@short_table_defs) {
      push @outcols, $_->[0] if($opts{$_->[0]});
    }
  }
  my $summary_header = sprintf("%-40s\t".'%-24s'x($#outcols+1),"alias",@outcols);
  printf(STDERR "#$summary_header\n");
}


my %id_alias;
for(my $i=0; $i<=$#args; $i++) {
  show_results(get_data($args[$i]),$args[$i]);
}
exit(0);


#########################################
#
#
#########################################
sub map_args_to_pseq_ids($@) {

  my $or = shift;
  my @pseq_ids;
  my $sno = 0;
  if ($or->{'select-by-unison-id'}) {
	# expand ranges like 1..5 to (1,2,3,4,5)
	# This is in part to sanitize the expressions which will be
	# eval'd next
	if (my @bad = grep {not /^\d+$|^\d+\.\.\d+$|\d+-\d+$/} @_) {
	  die("'$bad[0]' doesn't specify a pseq_id or a range of pseq_ids\n");
	}
	@pseq_ids = map { s/-/../; eval "$_" } @_;
	%id_alias= map {$_ => $u->best_alias($_)} @pseq_ids;
	printf(STDERR "# %d sequences specified by Unison id\n", $#pseq_ids+1) if $opts{verbose};	
  }
  elsif ($or->{'select-by-seq'}) {

    my $file= shift;
    my $in;
    if($file =~ /^\>/) {
      my ($fh, $fn) = tempfile();
      if (defined $fh) {
	print $fh join "\n",@args;
	$fh->close;
	$in = new Bio::SeqIO( -file => $fn,
			      -format => 'fasta' );
      }
    }
    else {
      $in = new Bio::SeqIO( -file => $file,
			    -format => 'fasta' );
    }
    while ( my $bs = $in->next_seq() ) {
      $sno++;
      my $pseq_id = $u->pseq_id_by_sequence( $bs->seq() );
      if (not defined $pseq_id) {
	warn( "! Sequence #$sno (", $bs->display_id(), ") not in Unison\n" );
	next;
      }
      printf(STDERR "* %s (Unison:%d; %s);\n",
	     $bs->display_id(), $pseq_id,
	     $u->best_alias($pseq_id) || '<no alias>');
      push @pseq_ids, $pseq_id;
      $id_alias{$pseq_id} = $u->best_alias($pseq_id);
    }
  }
  elsif ($or->{'select-by-alias'} or $or->{'select-by-alias-fuzzy'}) {
	foreach my $arg (@_) {
	  my (@Q) = ( $or->{'select-by-alias'} 
				  ? $u->get_pseq_id_from_alias_exact( $arg )
				  : $u->get_pseq_id_from_alias( $arg ) );
	  if (not @Q) {
		warn("$0: no sequences found for alias '$arg'\n");
	  } elsif ($#Q > 0 and $or->{'select-by-alias'}) {
		# no warning for fuzzy searches
		# this can only happen for aliases in multiple origins
		warn("$0: multiple sequences found for alias '$arg'\n");
	  }
	  push(@pseq_ids, @Q);
	  %id_alias= map {$_ => $arg} @pseq_ids;
	}
	printf(STDERR "# %d sequences selected by alias\n", $#pseq_ids+1) if $opts{verbose};
  }
  return @pseq_ids;
}

#########################################
#
#
#########################################
sub get_data($) {
  my $pseq_id = shift;
  my $r;
  my @table_defs = ( $opts{'summary'} ? @short_table_defs : @long_table_defs );
  my $summary = $id_alias{$pseq_id};

  foreach (@table_defs) {

    my $data = $_->[0];
    if ($optsum != 0) {
      my $ans = grep {/$data/}map {$opts{$_}?$_:''}@outcols;
      next if not $ans;
    }

    # get the numeric params_id corresponding to the desired $params
    my $params_id = $u->params_id_by_name($_->[3]);
    (defined $params_id)
      || die($_->[3].": No such parameter set name\n");

    my $table=$_->[1];
    my $cols = join(',',@{$_->[2]});
    my $cond = ($_->[4] ? $_->[4] : '');
    my $sql = "select $cols from $table where pseq_id=? and params_id=?";
    $sql .= " and $cond" if($_->[4]);
    $ sql .= " order by start" if($cols =~ /start/);

    # prepare the lookup
    my $sth = $u->prepare($sql);

    my @results = @{ $u->selectall_arrayref($sth,undef,
					    $pseq_id, $params_id) };

    $r->{$data}=\@results;
  }
  return ($r);
}

#########################################
#
#
#########################################
sub show_results($$) {
  my ($r,$pseq_id) = @_;

  my @table_defs = ( $opts{'summary'} ? @short_table_defs : @long_table_defs );
  my $summary = sprintf("%-40s\t",$id_alias{$pseq_id});

  foreach (@table_defs) {

    my $data = $_->[0];
    if ($optsum != 0) {
      my $ans = grep {/$data/}map {$opts{$_}?$_:''}@outcols;
      next if not $ans;
    }

    my $params_id = $u->params_id_by_name($_->[3]);
    my $table=$_->[1];
    my $cols = join(',',@{$_->[2]});
    my $cond = ($_->[4] ? $_->[4] : '');
    my @results = @{$r->{$_->[0]}};
    if (not @results and not $opts{summary}) {
      # !!! no results => either 1) never run or 2) no results given criteria
      # distinguish these cases by checking the run_history table.
      my $z = $u->get_run_timestamp($pseq_id,$params_id,undef,undef);
      if (defined $z) {
	print("  ran on $z; no hits with $cond for $data\n");
      } else {
	print("  not run using parameters '$_->[3]\n");
      }
      next;
    }
    printf(STDERR "# $pseq_id : params = $_->[3] (params_id = $params_id : %d result(s)\n",$#results+1) if $opts{verbose} and !$opts{summary};
    if($opts{summary}) {
      foreach my $a (@results) {
	if($data eq 'pfam') {
	  $summary .= sprintf("%-20s","$a->[0]($a->[1]),");
	}
	elsif($data eq 'signalp') {
	  $summary .= sprintf("%-20s",yes_no($a->[0]));
	}
	else {
	  $summary .= sprintf("%-20s",$a->[0]);
	}
      }
      $summary .= "-\t\t" if $#results == -1;
      $summary .= "\t";
    }
    else {
      printf(STDERR "#$data\n");
      printf(STDERR "#".join "\t",@{$_->[2]},"\n");
      foreach my $a (@results) {
	$a->[$#{$a}] = yes_no($a->[$#{$a}]) if($data eq 'signalp');
	printf(join "\t", @{$a},"\n");
      }
      print "\n";
    }
  }
  print "$summary\n" if($opts{summary});
}
#########################################
#
#
#########################################
sub parse_options() {
  my %opts = 
	(
	 # how to select sequences
	 'select-by-seq' => 0,
	 'select-by-alias' => 0,
	 'select-by-alias-fuzzy' => 0,
	 'select-by-unison-id' => 0,

	 #data type
	 'pfam' => 0,
	 'signalp' => 0,
	 'transmembrane' => 0,
	 'localization' => 0,

	 #output options
	 'summary' => 0,

	 # generic options
	 'verbose' => 0,
	 'verbose_frequency' => 10,
	 'help' => 0,
	 'version' => 0
	);
  GetOptions( \%opts,
	      'select-by-seq|S+',
	      'select-by-alias|A+',
	      'select-by-alias-fuzzy|F+',
	      'select-by-unison-id|unison|U+',

	      'pfam',
	      'signalp',
	      'transmembrane',
	      'localization',

	      'summary|s+',
	      'verbose|v+',
	      'help|h+',
	      'version|V',
	    )
	|| die("$0: you got usage issues, homey\n");

  my $optsum;
  my @opts;
  @opts = qw(select-by-seq select-by-alias select-by-alias-fuzzy
	     select-by-unison-id);
  $optsum = eval join('+', map {$opts{$_}?1:0} @opts);
  if ($optsum == 0) {
    $opts{'select-by-unison-id'}++;
  } elsif ($optsum > 1) {
    die("$0: may only specify one of {", join(',',@opts), "}.\n");
  }
  return %opts;
}

sub yes_no {
  return ( (shift) ?'yes':'no');
}
