#!/usr/bin/env perl

# unison-annotation -- output annotation from Unison
# $Id$

=pod

=head1 NAME

B<unison-annotation> -- retrieve annotations from Unison
S<$Id$>

=head1 SYNOPSIS

  unison-annotation 1234
  unison-annotation -A TNFA_HUMAN
  unison-annotation -F NP_004439
  unison-annotation -F UNQ2109
  unison-annotation -S seqs.fa
  unison-annotation -G 1956
  unison-annotation -G 1956-1970
  unison-annotation 100-110

=head1 OPTIONS


unison-annotation [-S|-A|-F|-P|-G|-p  -v|-f summary  |--pfam|--signalp|--tm|--protcomp|--regexp|--bigpi|--patents|--alias|--user-ann  -h|-V]

               input choices
               -------------
 #1 by sequence as input(protein sequences only)
 unison-annotation -S <fasta file>
    or cat <fasta file> | unison-annotation -S
 #2 by an alias (protein accessions only)
 unison-annotation -A <alias>
    or echo <alias> | unison-annotation -A
 #3 by a fuzzy alias (protein accessions only)
 unison-annotation -F <fuzzy alias>
    or echo <fuzzy alias> | unison-annotation -F
 #4 by sequence id
 unison-annotation -P <pseq_id>
    or echo <pseq_id> | unison-annotation -P
    or unison-annotation pseq_id (default)
    or echo pseq_id | unison-annotation
    or unison-annotation <range-of-pseq_ids>
 #5 by NCBI gene id
 unison-annotation -G <gi>
    or echo <gi> | unison-annotation -G
    or unison-annotation -G <range-of-gis>
 #6 by Affy/Agilent probe id(s)
 unison-annotation -p <probe_id>
    or echo <probe_id> | unison-annotation -p
    or cat probe_ids_file | unison-annotation -p


               annotation choices
               --------------
 #1 specific annotation
 unison-annotation --pfam
 unison-annotation --signalp
 unison-annotation --tm
 unison-annotation --protcomp
 unison-annotation --bigpi
 unison-annotation --regexp
 unison-annotation --patents
 unison-annotation --alias

 #2 all annotations (default)
 unison-annotation ...

               output format choices
               --------------
 #1 summary (one line per protein)
 unison-annotation -f summary [-S|-A|-F|-P|-G|-p] <input>
 #2 detailed (default)
 unison-annotation [-S|-A|-F|-P|-G|-p] <input>
 #3 verbose
 unison-annotation -v [-S|-A|-F|-P|-G|-p] <input>
 #4 help and Version
 perldoc unison-annotation
 unison-annotation -V


               filtering choices
               --------------
 #1 human sequences only
 unison-annotation --human [-S|-A|-F|-P|-G|-p] <input>

=head1 DESCRIPTION

B<unison-annotation> outputs annotations from Unison

=cut

use warnings;
use strict;

use Bio::SeqIO;
use File::Temp qw(tempfile);
use Pod::Usage;

use FindBin;
use lib "$FindBin::RealBin/../../perl5", "$FindBin::RealBin/../../perl5-ext";

use Unison;
use Getopt::Long qw(:config gnu_getopt);

#also shows the program flow
sub parse_options();
sub map_args_to_pseq_ids($@);
sub get_data($);
sub show_results($$);

my %opts = parse_options();

# connect with defaults. See Unison::DBI. Typically, the connection is made
# to the csb production host ('csb'), csb production database (also 'csb'),
# as the calling user id, authenticated by kerberos.
my $u = new Unison();
( defined $u )
    || die("! couldn't open a connection to unison\n");

#data_type table/view columns condition
my @short_table_defs = (
    [ 'signalp',  'pseq_features_signalpnn_v', [qw(feature)] ],
    [ 'tm',       'pseq_features_tmhmm_v',     [qw(feature)] ],
    [ 'regexp',   'pseq_features_prosite_v',   [qw(feature)] ],
    [ 'bigpi',    'pseq_features_bigpi_v',     [qw(feature)] ],
    [ 'pfam',     'pseq_features_pfam_v',      [qw(feature)], 'eval < 1e-2' ],
    [ 'protcomp', 'psprotcomp_reliable_v',     [qw(loc)] ],
);

my @long_table_defs = (
    [ 'signalp', 'pseq_features_signalpnn_v', [qw(start stop)] ],
    [ 'tm',      'pseq_features_tmhmm_v',     [qw(start stop)] ],
    [ 'regexp',  'pseq_features_prosite_v',    [qw(start stop feature)] ],
    [ 'bigpi',   'pseq_features_bigpi_v', [qw(start score eval details)] ],
    [ 'patents', 'patent_count_v',        [qw(count)] ],
    [   'pfam', 'pseq_features_pfam_v',
        [qw(start stop score eval acc feature descr)]
    ],
    [ 'protcomp', 'psprotcomp_reliable_v', [qw(loc)] ],
    [   'alias',                  'current_annotations_v',
        [qw(alias origin descr)], 'ann_pref < 20000'
    ]
);

# args from command line or stdin, but not both
my (@args) = @ARGV ? @ARGV : map { chomp; $_ } <>;
my ( $pseq_ids, $user_anns ) = map_args_to_pseq_ids( \%opts, @args );
my @outcols = map { $_->[0] } @long_table_defs;
my $optsum = eval join( '+', map { $opts{$_} ? 1 : 0 } @outcols );

my ( $params, $id_alias, $fmt );
my $ba_sth = $u->prepare_cached('select best_annotation(?)');
my $rh_sth
    = $u->prepare_cached(
    'select params_id,params,ran_on from run_history_v where pseq_id=? and run_id=?'
    );

print_headers();
foreach my $pseq_id (@$pseq_ids) {
    show_results( get_data($pseq_id), $pseq_id );
}

#all done
exit(0);

#########################################
#
#
#########################################
sub map_args_to_pseq_ids($@) {

    my $or = shift;
    my (@pseq_ids);
    my %user_anns;
    my $sno = 0;
    my $sth = $u->prepare_cached('select best_annotation(?)');
    if ( $or->{'select-by-unison-id'} ) {

        # expand ranges like 1..5 to (1,2,3,4,5)
        # This is in part to sanitize the expressions which will be
        # eval'd next
        if ( my @bad = grep { not /^\d+$|^\d+\.\.\d+$|\d+-\d+$/ } @_ ) {
            die("'$bad[0]' doesn't specify a pseq_id or a range of pseq_ids\n"
            );
        }
        @pseq_ids = map { s/-/../; eval "$_" } @_;
        printf( STDOUT "# %d sequences specified by Unison id\n",
            $#pseq_ids + 1
        ) if $opts{verbose};
    }
    elsif ( $or->{'select-by-seq'} ) {

        my $file = shift;
        my $in;
        if ( $file =~ /^\>/ ) {
            my ( $fh, $fn ) = tempfile();
            if ( defined $fh ) {
                print $fh join "\n", @args;
                $fh->close;
                $in = new Bio::SeqIO(
                    -file   => $fn,
                    -format => 'fasta'
                );
            }
        }
        else {
            $in = new Bio::SeqIO(
                -file   => $file,
                -format => 'fasta'
            );
        }
        while ( my $bs = $in->next_seq() ) {
            $sno++;
            my $pseq_id = $u->pseq_id_by_sequence( $bs->seq() );
            if ( not defined $pseq_id ) {
                warn(
                    "#! Sequence #$sno (",
                    $bs->display_id(),
                    ") not in Unison\n"
                );
                next;
            }
            printf( STDOUT "#* %s (Unison:%d; %s);\n",
                $bs->display_id(), $pseq_id,
                $u->best_alias($pseq_id) || '<no alias>' )
                if $opts{verbose};
            push @pseq_ids, $pseq_id;
            $user_anns{$pseq_id} = $bs->display_id() . " " . $bs->desc();
        }
    }
    elsif ( $or->{'select-by-alias'} or $or->{'select-by-alias-fuzzy'} ) {
        foreach my $arg (@_) {
            my (@Q) = (
                  $or->{'select-by-alias'}
                ? $u->get_pseq_id_from_alias_exact($arg)
                : $u->get_pseq_id_from_alias($arg)
            );
            if ( not @Q ) {
                warn("#$0: no sequences found for alias '$arg'\n");
            }
            elsif ( $#Q > 0 ) {

                # no warning for fuzzy searches
                # this can only happen for aliases in multiple origins
                warn("#$0: multiple sequences found for alias '$arg'\n")
                    if ( $or->{'select-by-alias'} );
            }
            if ( $or->{'select-by-alias-fuzzy'} and $or->{'human'} ) {
                my @ids;
                foreach my $q (@Q) {
                    my ($e)
                        = $u->selectrow_array(
                        "select pseq_id from pseqset where pseq_id=$q and pset_id=1"
                        );
                    push @ids, $q if ($e);
                }
                @Q = @ids;
            }
            $user_anns{$_} = $arg foreach (@Q);
            push( @pseq_ids, @Q );
        }
        printf( STDOUT "# %d sequences selected by alias\n", $#pseq_ids + 1 )
            if $opts{verbose};
    }
    elsif ( $or->{'select-by-gi'} ) {

        # expand ranges like 1..5 to (1,2,3,4,5)
        # This is in part to sanitize the expressions which will be
        # eval'd next
        if ( my @bad = grep { not /^\d+$|^\d+\.\.\d+$|\d+-\d+$/ } @_ ) {
            die("'$bad[0]' doesn't specify a gi or a range of gi\n");
        }
        my @gis = map { s/-/../; eval "$_" } @_;

        my @ids;
        foreach my $gi (@gis) {
            my @Q = @{
                $u->selectall_arrayref(
                    "select distinct(pseq_id) from pseq_gene_mv where gene_id=$gi"
                )
                };
            push @ids, @Q if ( $#Q >= 0 );
            if ( not @Q ) {
                warn("#$0: no sequences found for gi '$gi'\n");
            }
            elsif ( $#Q > 0 ) {
                warn("#$0: multiple sequences found for gi '$gi'\n");
            }
            $user_anns{$_} = $gi foreach (@Q);
        }
        push( @pseq_ids, map { $_->[0] } @ids );
        printf( STDOUT "# %d sequences specified by Unison id\n",
            $#pseq_ids + 1
        ) if $opts{verbose};
    }
    elsif ( $or->{'select-by-probe'} ) {
        my %ids;
        foreach my $pi (@_) {
            my @Q = @{
                $u->selectall_arrayref(
                    "select distinct (r.t_pseq_id) from pmap_locus_representative_mv r join pseq_probe_mv p on r.q_pseq_id=p.pseq_id where probe_id='$pi'"
                )
                };
            map { $ids{ $_->[0] }++ } @Q if ( $#Q >= 0 );
            if ( not @Q ) {
                warn("#$0: no sequences found for probe_id '$pi'\n");
            }
            elsif ( $#Q > 0 ) {
                warn("#$0: multiple sequences found for probe_id '$pi'\n");
            }
            map { $user_anns{ $_->[0] } = $pi } @Q;
        }
        push( @pseq_ids, keys %ids );
        printf( STDOUT "# %d sequences specified by Unison id\n",
            $#pseq_ids + 1
        ) if $opts{verbose};
    }
    return (\@pseq_ids, \%user_anns);
}

#########################################
#
#
#########################################
sub get_data($) {
    my $pseq_id = shift;
    my $r;

    my @table_defs
        = ( $opts{'summary'} ? @short_table_defs : @long_table_defs );
    foreach (@table_defs) {

        my $data = $_->[0];

        if ( $optsum != 0 ) {
            my $ans = grep {/$data/} map { $opts{$_} ? $_ : '' } @outcols;
            next if not $ans;
        }

        my $table = $_->[1];
        my $cols  = join( ',', @{ $_->[2] } );
        my $cond  = ( $_->[3] ? $_->[3] : '' );
        my $sql   = "select $cols from $table where pseq_id=?";
        $sql .= " and $cond" if ( $_->[3] );

        # prepare the lookup
        my $sth = $u->prepare($sql);
        my @results = @{ $u->selectall_arrayref( $sth, undef, $pseq_id ) };
        $r->{$data} = \@results;

        #alias will have best_alias and annot will have best_annotation

	if ($opts{'user-ann'} and defined $user_anns->{$pseq_id}) {
	    $id_alias->{$pseq_id}{annot} = $user_anns->{$pseq_id};
	    $id_alias->{$pseq_id}{alias} = $user_anns->{$pseq_id};
	} else {
	    $id_alias->{$pseq_id}{annot}
            = $u->selectrow_array( $ba_sth, undef, $pseq_id );
	    $id_alias->{$pseq_id}{alias} = $u->best_alias($pseq_id);
	}
        if ( $data ne 'patents' and $data ne 'alias' ) {

#tie annotation choice to pftype to get the latest params/run(->preferred_run_id_by_pftype)
            my %pftypes = (
                'signalp'  => 'SignalP',
                'tm'       => 'TMHMM',
                'protcomp' => 'Protcomp',
                'pfam'     => 'hmm',
                'regexp'   => 'regexp',
                'bigpi'    => 'BIG-PI'
            );

            my $run_id
                = $u->selectrow_array( "select preferred_run_id_by_pftype('"
                    . $pftypes{ $_->[0] }
                    . "')" );
            ( defined $run_id )
                || die(
                $pftypes{ $_->[0] } . ": No such parameter set name\n" );
            $params->{$data}
                = $u->selectrow_hashref( $rh_sth, undef, $pseq_id, $run_id );
        }
    }
    return ($r);
}

#########################################
#
#
#########################################
sub show_results($$) {

    my ( $r, $pseq_id ) = @_;
    my @table_defs
        = ( $opts{'summary'} ? @short_table_defs : @long_table_defs );
    printf( STDOUT "*Unison:$pseq_id:$id_alias->{$pseq_id}{annot}\n" )
        if !$opts{summary};
    my @data;
    my $data_str;
    my $protcomp = 0;
    foreach (@table_defs) {

        my $table = $_->[0];
        if ( $optsum != 0 ) {
            my $ans = grep {/$table/}
                map { $opts{$table} ? $table : '' } @outcols;
            next if not $ans;
        }

        $protcomp = 1 if ( $table eq 'protcomp' );
        my @results = @{ $r->{$table} };

        if ( $opts{summary} ) {
            if ( not @results ) {
                if ( $table eq 'protcomp' ) {
                    push @data, '';
                }
                else {
                    $data_str .= '';
                }
            }
            else {
                foreach my $a (@results) {
                    if ( $table eq 'protcomp' ) {
                        push @data, $a->[0];
                    }
                    else {
                        $data_str .= "$a->[0],";
                    }
                }
                $data_str .= " ";
            }
        }
        else {
            printf( STDOUT "*$table" );

            if ( $table ne 'patents' and $table ne 'alias' ) {
                my $ran_on;
                $ran_on
                    = (
                    defined( $params->{$table}{ran_on} )
                    ? 'ran on ' . $params->{$table}{ran_on}
                    : 'not run' );
                my $params_name
                    = (
                    defined( $params->{$table}{params} )
                    ? $params->{$table}{params}
                    : '' );
                printf( STDOUT " ($params_name, $ran_on)\n" );
                printf( STDOUT
                        "#$pseq_id : (params_id = $params->{$table}{params_id} : %d result(s))\n#",
                    $#results + 1
                ) if $opts{verbose};
            }
            else {
                printf( STDOUT "\n" );
            }
            printf( STDOUT "#" . join "\t", @{ $_->[2] }, "\n" )
                if (@results);
            foreach my $a (@results) {
                printf( join "\t", @{$a}, "\n" );
            }
            print "\n";
        }
    }
    if ( $opts{summary} ) {
        $fmt = "@<<<<<<< @<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< ";
        push @data, $data_str;
        $fmt .= "@<<<<<<<<<<<<<<<<<<<<<" if ($protcomp);
        $fmt
            .= "@<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<";
        my $header = "format OUT$pseq_id =\n$fmt\n"
            . '$pseq_id,$id_alias->{$pseq_id}{alias},' . '@data' . "\n";
        $header .= ".\n";
        eval $header;
        $~ = "OUT$pseq_id";
        write;
    }
}
#########################################
#
#
#########################################
sub parse_options() {
    my %opts = (

        # how to select sequences
        'select-by-seq'         => 0,
        'select-by-alias'       => 0,
        'select-by-alias-fuzzy' => 0,
        'select-by-unison-id'   => 0,
        'select-by-gi'          => 0,
        'select-by-probe'       => 0,

        #data type
        'pfam'     => 0,
        'signalp'  => 0,
        'tm'       => 0,
        'protcomp' => 0,
        'bipig'    => 0,
        'regexp'   => 0,
        'patents'  => 0,
        'alias'    => 0,

        #output options
        'format' => undef,
        'user-ann'    => 0,


        #filtering options
        'human' => 0,

        # generic options
        'verbose'           => 0,
        'verbose_frequency' => 10,
        'help'              => 0,
        'version'           => 0
    );
    GetOptions(
        \%opts,
        'select-by-seq|S+',
        'select-by-alias|A+',
        'select-by-alias-fuzzy|F+',
        'select-by-unison-id|P+',
        'select-by-gi|G+',
        'select-by-probe|p+',

        'pfam',
        'signalp',
        'tm',
        'protcomp',
        'bigpi',
        'regexp',
        'patents',
        'alias',

        'human',
        'user-ann|user_ann',

        'format|f=s',
        'verbose|v+',
        'help|h+',
        'version|V',
    ) || die("$0: you got usage issues, homey\n");

    my $optot;
    my @opts;
    @opts = qw(select-by-seq select-by-alias select-by-alias-fuzzy
        select-by-unison-id select-by-gi select-by-probe);
    $optot = eval join( '+', map { $opts{$_} ? 1 : 0 } @opts );
    if ( $optot == 0 ) {
        $opts{'select-by-unison-id'}++;
    }
    elsif ( $optot > 1 ) {
        die( "$0: may only specify one of {", join( ',', @opts ), "}.\n" );
    }

    if ( $opts{version} ) {
        print( STDOUT
                '$Id$ ',
            "\n"
        );
        exit;
    }
    if ( $opts{help} ) {
        pod2usage( { -verbose => 2 } );
    }
    if ( $opts{format} ) {
        if ( $opts{format} ne 'summary' ) {
            print( STDERR "$opts{format} not supported, try -f summary\n" );
            exit(-1);
        }
        else {
            $opts{summary}++;
        }
    }
    return %opts;
}

#########################################
#
#
#########################################
sub print_headers {

    $fmt = "@<<<<<<< @<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< ";
    my @fmt_each
        = qw(@<<<<<<<<<<<<<<<<<<<<< @<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<);

    my @table_defs
        = ( $opts{'summary'} ? @short_table_defs : @long_table_defs );
    my $header;
    if ( $opts{summary} ) {
        if ($optsum) {
            undef @outcols;
            foreach my $i ( 0 .. $#table_defs ) {
                if ( $opts{ $table_defs[$i]->[0] } ) {
                    push @outcols, $table_defs[$i]->[0];
                }
            }
            $fmt .= "$fmt_each[0]" if ( grep {/protcomp/} @outcols );
            $fmt .= "$fmt_each[1]"
                if ( !( grep {/protcomp/} @outcols and $#outcols == 0 ) );
        }
        else {
            $fmt .= "@<<<<<<<<<<<<<<<<<<<< @<<<<<<<<<<<<< ";
        }
        $header = "$fmt\n";
        $header .= 'pseq_id,alias,';
        if ($optsum) {
            $header .= 'protcomp,' if ( grep {/protcomp/} @outcols );
            $header .= 'features'
                if ( !( grep {/protcomp/} @outcols and $#outcols == 0 ) );
        }
        else {
            $header .= 'protcomp,features';
        }
        $header .= "\n";
    }
    else {
        $header .= "";
    }
    my $main_header = "format STDOUT =\n" . $header . "\n.\n";
    eval $main_header;
    write;
}
