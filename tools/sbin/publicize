#!/usr/bin/perl
#
# make-csb-public -- filter out proprietary data from a COPY-formatted
# psql dump
#
# $Id: make-csb-public,v 1.10 2005/07/13 06:20:47 rkh Exp $
# Reece Hart <rkh@gene.com>
#

# TODO:
# - rename
# - filter entire schemas (e.g., sst)


use strict;
use warnings;
use Unison;
use Unison::pset;
use Storable;

my $testing = 0;

select(STDERR); $|++;						# unbuffer stderr
select(STDOUT);


my $pset_name = $testing ? 'tnf knowns - human' : 'public';

my $eodata_re = qr/^\\\./;
my $pseq_id_re = qr/pseq_id|q_pseq_id|t_pseq_id|query|target/;
my $params_id_re = qr/params_id/;
my $porigin_id_re = qr/porigin_id/;
my $palias_id_re = qr/palias_id/;
my $filter_cols_re = qr/$pseq_id_re|$params_id_re|$porigin_id_re/;

sub col_match($$@);
sub load_public_ids($);


my %public_ids = load_public_ids($pset_name);

printf(STDERR "# %d pseq_ids, %d porigin_ids, %d params_ids, %d palias_ids will be public\n",
	   scalar(keys %{$public_ids{pseq}}),
	   scalar(keys %{$public_ids{porigin}}),
	   scalar(keys %{$public_ids{params}}),
	   scalar(keys %{$public_ids{palias}})
	  );


my $table;
my @pseq_id_cols;
my @params_id_cols;
my @porigin_id_cols;
my @palias_id_cols;


while( my $line = <> ) {
  # default is to print this line at the end of the loop
  # exceptions are to: 1) skip to next line; 2) insert/append
  # text with current line.

  print(STDERR '.') if ($. % 50000  == 0);
  print(STDERR "$.\n") if ($. % 500000 == 0);


  if ( $line =~ m/^COPY meta/ ) {
	my $CVSId = q$Id: make-csb-public,v 1.10 2005/07/13 06:20:47 rkh Exp $;
	my $TS = `date -u '+%Y-%m-%d %H:%M:%S'`; chomp $TS;
	$_ .= <<EOT
publicized by	$CVSId
publicized on	$TS
EOT


  } elsif ( my ($tbl, $cols) = $line =~ m/^COPY (\S+) \(([^\)]+)\)/ ) {
	my @cols = split(/,\s*/,$cols);
	@pseq_id_cols 	 = grep {$cols[$_]=~$pseq_id_re   } 0..$#cols;
	@params_id_cols  = grep {$cols[$_]=~$params_id_re } 0..$#cols;
	@porigin_id_cols = grep {$cols[$_]=~$porigin_id_re} 0..$#cols;
	@palias_id_cols  = grep {$cols[$_]=~$palias_id_re } 0..$#cols;
	if (   @pseq_id_cols
		or @params_id_cols 
		or @porigin_id_cols
		or @palias_id_cols) {
	  printf(STDERR "\n# $tbl: o(%s), q(%s), a(%s), p(%s)\n#<   $line",
			 join(',',@porigin_id_cols), join(',',@pseq_id_cols),
			 join(',',@palias_id_cols),	 join(',',@params_id_cols) );
	  $table = $tbl;
	}


  } elsif ( defined $table and $line =~ m/^\\\./ ) {
	undef $table;


  } elsif ( defined $table ) {
	my @F = split(/\t/, $line);
	chomp $F[$#F];
	next if (@pseq_id_cols
			 and not col_match(\%public_pseq_ids,\@F, @pseq_id_cols));
	next if (@porigin_id_cols
			 and not col_match(\%public_porigin_ids,\@F, @porigin_id_cols));
	next if (@params_id_cols
			 and not col_match(\%public_params_ids,\@F, @params_id_cols));
	next if (@palias_id_cols
			 and not col_match(\%public_palias_ids,\@F, @palias_id_cols));


  }	elsif ($line =~ m/^(?:GRANT|REVOKE).+(?!PUBLIC|unison|loader)/) {
	next;
  }

  print $line;
}

exit(0);


sub load_public_ids($) {
  my $pset_name = shift;
  my $s_fn = "/tmp/public_ids -- $pset_name.plst";
  my %ids;

  if ( -f $s_fn ) {
	(my $ref = retrieve($s_fn))
	  || die("$0: retrieve failed on $s_fn\n");
	return %$ref;
  }

  my $u = new Unison(dbname=>'csb-dev');
  my @public_pseq_ids = $u->pseq_ids_by_pset($pset_name);
  my @public_porigin_ids = map {$u->porigin_porigin_id_by_origin($_)}
	qw(UniProt UniProt/TrEMBL PDB IPI RefSeq);
  my @public_params_ids = qw(3 4 5 8 9 11 12 15 16 17 19 21 22);
  my $ppis = join(',',@public_porigin_ids);
  my @public_palias_ids = map {$_->[0]} @{$u->selectall_arrayref(<<EOT,undef,$pset_name)};
SELECT DISTINCT A.palias_id
FROM v_current_annotations_unsorted A
JOIN pseqset S ON A.pseq_id=S.pseq_id
WHERE S.pset_id=pset_id(?) AND A.porigin_id IN ($ppis)
EOT

  %{$ids{pseq}} = map {$_=>1} @public_pseq_ids;
  %{$ids{porigin}} = map {$_=>1} @public_porigin_ids;
  %{$ids{params}} = map {$_=>1} @public_params_ids;
  %{$ids{palias}} = map {$_=>1} @public_palias_ids;
  $ids{CVSId} = q$Id$ ;
  $ids{pset_name} = $pset_name;

  if (not store(\%ids, $s_fn)) {
	warn("! store($s_fn) failed: $!\n");
  }
  print(STDERR "# stored public_ids in $s_fn\n");

  return %ids;
}


sub col_match($$@) {
  # given: ids, columns, col indices
  # return 1 (true) if all columns referenced by indices are in ids hash;
  # an empty index array is presumed to be vacuously true
  
  my $pids = shift;
  my $colr = shift;
  return 1 if $#_==-1;						# vacuously matches
  while( my $i = shift ) {
	return 1 if (exists $pids->{$colr->[$i]});
  }
  return 0;
}
