#!/usr/bin/perl
#
# make-csb-public -- restrict a COPY-format psql dump to public sequences
# and methods
#
# $Id: make-csb-public,v 1.6 2005/06/15 20:23:25 rkh Exp $
# Reece Hart <rkh@gene.com> 
# 

use strict;
use warnings;
use Unison;

# these are the SPDI pseq_ids (pset_id=900) as of 2005-05-26
# arguably, these should come from the database
my @public_pseq_ids = qw(
	22 106 109 110 111 112 113 114 115 116 121 122 125 126 127 128 129 130 132
	134 138 140 141 142 143 144 145 146 147 148 149 150 151 152 153 155 156
	157 160 162 163 166 167 168 169 170 172 173 174 175 176 178 179 180 182
	183 185 186 187 188 189 190 192 193 195 196 197 198 199 202 203 204 206
	207 208 209 210 212 214 215 216 217 218 220 224 225 227 228 229 230 231
	232 239 242 244 245 248 249 250 251 252 255 256 257 258 259 263 264 265
	266 268 270 271 272 273 274 275 276 277 280 285 286 287 292 293 294 297
	298 299 300 301 302 303 304 305 313 315 316 317 318 322 323 326 328 331
	332 333 334 335 336 343 346 347 348 349 350 351 353 354 355 356 357 358
	359 371 374 375 378 379 380 383 384 385 386 387 388 389 391 393 394 395
	397 398 399 400 401 402 403 405 406 407 408 409 411 414 415 416 417 418
	419 420 421 422 425 426 428 429 431 432 433 434 435 437 438 439 440 441
	442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459
	460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 476 477 478
	479 480 481 482 483 485 486 487 488 489 490 491 492 493 494 496 497 498
	513 514 515 516 519 520 521 522 523 524 525 526 527 528 530 531 532 533
	534 535 536 537 540 541 542 543 544 545 546 547 549 550 551 552 553 554
	557 558 559 560 561 562 563 564 565 566 567 568 570 571 572 573 574 577
	578 579 580 581 582 583 584 585 586 587 588 589 590 591 594 595 596 597
	598 599 600 602 603 604 605 606 607 609 610 611 612 613 614 615 616 617
	618 619 620 621 623 624 625 626 627 628 629 630 632 633 634 635 636 637
	638 639 640 642 643 644 645 646 647 651 660 683 684 686 687 688 689 690
	691 693 695 696 697 698 700 701 703 704 706 707 708 709 711 712 714 715
	716 717 718 719 734 741 744 745 746 1529 1621 1624 1627 1628 1631 1633
	1638 1641 1642 1643 1644 1646 1647 1657 1658 1660 1661 1663 1664 1665 1666
	1667 1668 1669 1670 1671 1672 1673 1674 1675 1676 1677 1678 1679 1680 1682
	1683 1684 1685 1686 1687 1688 1689 1690 1691 1692 1693 1694 1696 1697 1698
	1699 1700 1701 1702 1704 1705 1707 1709 1710 1711 1712 1713 1716 1717 1718
	1719 1720 1721 1722 1725 1726 1727 1728 1729 1730 1731 1732 1733 1734 1735
	1736 1738 1742 1743 1744 1745 1746 1747 1748 1749 2186 2187 2189 2190 2192
	2193 2194 2195 2196 2197 2198 2199 2201 2202 2203 2205 2206 2207 2209 2211
	2212 2217 2229 2230 2231 2232 2234 2235 2236 2237 2240 2241 2242 2243 2244
	2247 2248 2249 2250 2251 2252 2253 2254 2255 2257 2258 2259 2260 2261 2262
	2266 2267 2268 2269 2270 2271 2272 2273 2275 2277 2278 2279 2280 2281 2284
	2285 2286 2287 2288 2289 2290 2291 2295 2297 2401 2402 2403 2405 2407 2409
	2413 2414 2421 2422 2423 2424 2426 2427 2428 2429 2430 2440 2466 2518 2545
	2563 2570 2571 2572 2575 2587 2588 2589 2590 2591 2592 2596 2598 2601 2605
	2606 2607 2610 2611 2612 2614 2615 2616 2617 2618 2619 2621 2623 2624 2625
	2626 2627 2628 2629 2630 2633 2635 2636 2637 2638 2639 2640 2641 2642 2645
	2646 2651 2652 2653 2655 2656 2657 2659 2661 2671 2672 2673 2675 2677 2678
	2679 2680 2687 2688 2690 2692 2693 2694 2695 2696 2697 2698 2699 3854 4152
	4295 4296 4297 4299 4301 4304 4305 4306 4307 4308 4311 4312 4315 4317 4318
	4319 4320 4321 4322 4323 4324 4325 4328 4329 4330 4331 4332 4333 4334 4335
	4337 4338 4339 4340 4353 4362 4409 4410 4411 4412 4413 4415 4430 4452 4468
	4477 4536 4542 4554 4563 4564 4565 4566 4567 4568 4569 4570 4571 4572 4603
	4604 4605 4606 4607 4608 4609 4610 4611 4612 4613 4615 4617 4618 4619 4620
	4621 4622 4623 4624 4626 4628 4629 4630 4631 4632 4643 4648 4650 4661 4671
	4678 4682 4683 4684 4686 4687 4688 4689 4691 4692 4693 4695 4696 4697 4698
	4699 4702 4728 4729 4730 4732 5067 5074 5582 5926 5936 5937 5956 5967 5969
	5970 5971 5975 5976 5977 5978 5981 5984 6059 6060 6061 6062 6063 6064 6066
	6067 6068 6069 6076 6079 6083 6085 6086 6088 6089 6090 6091 6092 6093 6094
	6095 6100 6101 6103 6104 6107 6108 6109 6110 6111 6112 6113 6134 6136 6138
	6139 6145 6147 6149 6150 6151 6152 6153 6155 6156 6161 6352 6353 6354 6356
	6381 6383 7720 7722 7723 8566 8567 8569 8570 8572 8573 8574 8576 8577 8578
	8579 8580 8581 8582 8583 8584 8586 8589 8595 8596 8597 8598 8599 8600 8601
	8602 8604 8605 8606 8607 8614 8615 8616 8617 8619 8620 8621 8623 8624 8625
	8626 8627 8628 8633 8635 8637 8639 8652 8664 8665 8666 8668 8669 8670 8671
	8672 8673 8674 8675 8676 8677 8678 8679 8680 8681 8682 8683 8684 8685 8686
	8687 8688 8689 8690 8691 8692 8693 8694 8703 8704 8708 8710 8711 8712 8713
	8714 8716 8719 8722 8754 8784 8785 121982 127627 129441 136560 137327
	137629 140219 142035 180441 772025 1243078 1341381 1891983 1895229 1899058
	1899060 1944942 1945949 1946308 1957614 1958602 2023156 2023157 2023162
	2158945 2208409 2208410 2231686 2250007 2315031 2316143 2316144 2346383
	2365831 2366148 2366272 2366319 2366810 2367028 2367030 2367031 2367647
	2367740 2369079 2369161 2369497 2369658 2370103 2370130 2370413 2371270
	2386565 2947138 3380736 3380797 3389253 3389570 4843010 5221835 5221836
	5221837 5221838 5221839 5221840 5221841 5221842 5221845 5221846 5221847
	5221848 5221849 5221850 5221855 5221856 5221860 5221862 5221872 5221873
	5221888 5320169 );

my @public_params_ids = qw(3 4 5 8 9 11 12 15 16 17 19 21 22);

my %public_pseq_ids = map {$_=>1} @public_pseq_ids;
my %public_params_ids = map {$_=>1} @public_params_ids;

printf(STDERR "# %d pseq_ids, %d params_ids will be public\n",
	   scalar(keys %public_pseq_ids), scalar(keys %public_params_ids));

my $table;									# table name
my @cols;									# order and names of cols
my @pseq_id_cols;						   # list of pseq_id cols indicies
my @params_id_cols;						 # list of params_id cols indicies
my $discarded;								# num rows discarded
my %discarded;							# num rows discarded, by table name
my $nrows;
my %nrows;

while (my $line = <>) {
  my $discard = 0;

  if ( defined $table and (@pseq_id_cols or @params_id_cols) ) {
	# in COPY block
	if ($line =~ m/^\\./) {
	  printf(STDERR "# $table: %d/%d rows discarded\n", $discarded, $nrows);
	  $discarded{$table} = $discarded;
	  $nrows{$table} = $nrows;
	  undef @pseq_id_cols;
	  undef @params_id_cols;
	  undef @cols;
	  undef $table;
	  undef $discarded;
	} else {
	  # perhaps discard COPY block rows
	  $nrows++;
	  my @F = split(/\t/,$line);
	  chomp $F[$#F];
	  if (@pseq_id_cols) {
		foreach my $col (@pseq_id_cols) {
		  if (not $public_pseq_ids{$F[$col]}) {
			$discard++;
			last;
		  }
		}
	  }
	  if (@params_id_cols) {
		foreach my $col (@params_id_cols) {
		  if (not $public_params_ids{$F[$col]}) {
			$discard++;
			last;
		  }
		}
	  }
	}
  }

  if ( my ($tbl, $cols) = $line =~ m/^COPY (\S+) \(([^\)]+)\)/ ) {
	# enter a COPY block
	if ($tbl eq 'meta') {
	  my $CVSId = q/$Id$/;
	  my $TS = `date -u '+%Y-%m-%d %H:%M:%S'`; chomp $TS;
	  $line .= <<EOT
publicized by	$CVSId
publicized on	$TS
EOT
	} else {
	  @cols = split(/,\s*/,$cols);
	  for (my $i=0; $i<=$#cols; $i++) {
		if ($cols[$i] =~ m/^(?:pseq_id|q_pseq_id|t_pseq_id|query|target)$/) {
		  push(@pseq_id_cols, $i);
		} elsif ($cols[$i] =~ m/^(?:params_id)$/) {
		  push(@params_id_cols, $i);
		}
	  }
	  if (@pseq_id_cols or @params_id_cols) {
		$table = $tbl;
		$discarded = 0;
		$nrows = 0;
		printf(STDERR "# <$line# pseq_id_cols=%s params_id_cols=%s\n",
			   @pseq_id_cols ? join(',',@pseq_id_cols) : '-',
			   @params_id_cols ? join(',',@params_id_cols) : '-');
	  }
	}
  }


  if ($discard) {
	$discarded++;
  } else {
	print $line;
  }
}



print(STDERR "Summary:");
foreach my $table (sort keys %discarded) {
  printf(STDERR "# $table: %d/%d rows discarded\n", $discarded{$table}, $nrows{$table});
}
