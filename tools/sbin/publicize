#!/usr/bin/perl
#
# make-csb-public -- filter out proprietary data from a COPY-formatted
# psql dump
#
# $Id: make-csb-public,v 1.8 2005/07/10 03:25:06 rkh Exp $
# Reece Hart <rkh@gene.com> 
# 

# TODO:
# - rename
# - filter entire schemas (e.g., sst)
# - pseq_ids from a pset
# - filter origins (esp. geneseq), will require caching palias_ids
# - refactor into kinder layout


use strict;
use warnings;
use Unison;

my $u = new Unison;

my @public_pseq_ids = map {$$_[0]} @{$u->selectall_arrayref(<<EOT)};
  select pseq_id from pseqset where pset_id=pset_id('public')
EOT

my @public_porigin_ids = map {$u->porigin_porigin_id_by_origin($_)}
  qw(UniProt UniProt/TrEMBL PDB IPI RefSeq);

## the following should use params_id_by_name()
my @public_params_ids = qw(3 4 5 8 9 11 12 15 16 17 19 21 22);


my %public_pseq_ids = map {$_=>1} @public_pseq_ids;
my %public_porigin_ids = map {$_=>1} @public_porigin_ids;
my %public_params_ids = map {$_=>1} @public_params_ids;

printf(STDERR "# %d pseq_ids, %d porigin_ids, %d params_ids will be public\n",
	   scalar(keys %public_pseq_ids),
	   scalar(keys %public_porigin_ids),
	   scalar(keys %public_params_ids)
	  );


my $table;									# table name
my @cols;									# order and names of cols
my @pseq_id_cols;						   # list of pseq_id cols indicies
my @params_id_cols;						 # list of params_id cols indicies
my $discarded;								# num rows discarded
my %discarded;							# num rows discarded, by table name
my $nrows;
my %nrows;


while( <> ) {
  my $discard = 0;

  
  enter pseq/params copy
  in pp copy
    filter
  enter palias copy
  in pa copy
    filter
  enter meta copy
  discard grant to cavs, etc
}


print(STDERR "Summary:");
foreach my $table (sort keys %discarded) {
  printf(STDERR "# $table: %d/%d rows discarded\n", $discarded{$table}, $nrows{$table});
}


__END__

while (my $line = <>) {
  my $discard = 0;

  if ( defined $table and (@pseq_id_cols or @params_id_cols) ) {
	# in COPY block
	if ($line =~ m/^\\./) {
	  printf(STDERR "# $table: %d/%d rows discarded\n", $discarded, $nrows);
	  $discarded{$table} = $discarded;
	  $nrows{$table} = $nrows;
	  undef @pseq_id_cols;
	  undef @params_id_cols;
	  undef @cols;
	  undef $table;
	  undef $discarded;
	} else {
	  # perhaps discard COPY block rows
	  $nrows++;
	  my @F = split(/\t/,$line);
	  chomp $F[$#F];
	  if (@pseq_id_cols) {
		foreach my $col (@pseq_id_cols) {
		  if (not $public_pseq_ids{$F[$col]}) {
			$discard++;
			last;
		  }
		}
	  }
	  if (@params_id_cols) {
		foreach my $col (@params_id_cols) {
		  if (not $public_params_ids{$F[$col]}) {
			$discard++;
			last;
		  }
		}
	  }
	}

  # start of copy block?
  } elsif ( my ($tbl, $cols) = $line =~ m/^COPY (\S+) \(([^\)]+)\)/ ) {
	# enter a COPY block
	if ($tbl eq 'meta') {
	  my $CVSId = q$Id: make-csb-public,v 1.8 2005/07/10 03:25:06 rkh Exp $;
	  my $TS = `date -u '+%Y-%m-%d %H:%M:%S'`; chomp $TS;
	  $line .= <<EOT
publicized by	$CVSId
publicized on	$TS
EOT
	} else {
	  @cols = split(/,\s*/,$cols);
	  for (my $i=0; $i<=$#cols; $i++) {
		if ($cols[$i] =~ m/^(?:pseq_id|q_pseq_id|t_pseq_id|query|target)$/) {
		  push(@pseq_id_cols, $i);
		} elsif ($cols[$i] =~ m/^(?:params_id)$/) {
		  push(@params_id_cols, $i);
		}
	  }
	  if (@pseq_id_cols or @params_id_cols) {
		$table = $tbl;
		$discarded = 0;
		$nrows = 0;
		printf(STDERR "# <$line# pseq_id_cols=%s params_id_cols=%s\n",
			   @pseq_id_cols ? join(',',@pseq_id_cols) : '-',
			   @params_id_cols ? join(',',@params_id_cols) : '-');
	  }
	}
  } elsif ($line =~ m/^(?:GRANT|REVOKE).+(?!PUBLIC|unison|loader)/) {
	$discard++;
  }


  if ($discard) {
	$discarded++;
  } else {
	print $line;
  }
}
