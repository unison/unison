#!/bin/sh -e
# dev2stage: copy dev database to stage
# usage: dev2stage <stage-name>
# $Id: dev2stage,v 1.21 2007/03/13 00:28:45 rkh Exp $



echo '# $Id: dev2stage,v 1.21 2007/03/13 00:28:45 rkh Exp $' 1>&2

if [ $# != 1 -o -z "$1" ]; then
	echo "$0: exactly one non-empty argument required for the stage name" 1>&2
	exit 1;
fi

export PGDATABASE="$1"
export PGUSER=postgres

DUMP_OPTS=${DUMP_OPTS:-}

echo `date +'%Y-%m-%d %H:%M:%S'`: $0 started

# new stage database must not already exist
# die if a connection to it succeeds
if psql </dev/null >/dev/null 2>/dev/null; then
	echo "$PGDATABASE already exists; aborting" 1>&2
	exit 1
fi

# create the new database with necessary languages
createdb -O unison -EUTF8 "$PGDATABASE"
createlang plpgsql
createlang plperl
createlang plperlu


# restore selected schemas; order is important
## 2007-02-06 Reece Hart: I can't remember if the PGOPTIONS line is
## required. If staging breaks because of timeouts, uncomment the following
## line.
# export PGOPTIONS="-c statement_timeout=0"

SCHEMAS="postgres  pgutils public  go gong ncbi pdb scop sst tax marray unison_aux unison"
echo "WARNING: I'm staging these schemas ONLY: $SCHEMAS" 1>&2
for s in $SCHEMAS; do
	(
	 echo '\set ON_ERROR_STOP';
	 pg_dump $DUMP_OPTS -n "$s" "csb-dev"
	) | psql -aX
done


psql -qaf- <<EOF
alter database "$PGDATABASE" set search_path = unison,unison_aux,gong,pdb,scop,sst,tax,marray;

-- reconnect to enact search_path for analyze
\c -

analyze verbose;

select meta_update_kv('staged at', '`date +"%Y-%m-%d %H:%M:%S"`');
select meta_update_kv('staged by', '\$Id: dev2stage,v 1.21 2007/03/13 00:28:45 rkh Exp $')
EOF


echo `date +'%Y-%m-%d %H:%M:%S'`: $0 done
