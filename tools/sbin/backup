#!/bin/bash
# $Id: backup,v 1.14 2003/11/11 23:59:00 rkh Exp $

# backup -- backup the csb database
# you must set PGPASSWORD before running this script
# any user with write permission in /home/rkh/csb-db/backups/$PGDATABASE
# should be able to run this script.

source `dirname $0`/utils

schema=0
case "$1" in
	-s) schema=1; shift;;
esac

OPTS=
if [ "$schema" = 1 ]; then
   PGD_OPTS="-s";
fi


# after this point and until `trap' below, all exits
# are unexpected
cleanup ()
  { logger "! exited abnormally (status=$?)"; }
trap cleanup EXIT


PATH=/apps/compbio/i686-linux-2.4/bin:/usr/bin:/bin
case `hostname` in
    svc*|td-svc*|interceptor*|td-interceptor*)
    	PGHOST=;;
    *) 
    	PGHOST=td-svc;;
esac

export PGHOST
export PGDATABASE=${1:-csb}
if [ -n "$DEBUG" ]; then
	TABLE="-t porigin";
fi

DIR="/home/rkh/csb-db/backups/$PGDATABASE"
mkdir -p "$DIR"
DATE=`date +%Y-%m-%d-%H:%M`;
R="$DIR/$DATE.pgdump$PGD_OPTS"


# do the backup
logger "starting backup (OPTS=$PGD_OPTS; PGHOST=$PGHOST; PGDATABASE=$PGDATABASE; TABLE=$TABLE)"
(time -p pg_dump $PGD_OPTS $TABLE -X disable-triggers -X use-set-session-authorization -Ucompbio "$PGDATABASE" \
 | gzip -cq) >"$R".gz 2>"$R".err
E="$?"
S=`perl -le 'printf( "%.2f", (-s $ARGV[0]) / 2**20)' "$R".gz`
logger "backup completed; status $E; size: $S MB; time: `tr '\012' , <"$R".err`"
logger "backup log in $R.err"


# reset signal trap to exit gracefully
trap '' EXIT
