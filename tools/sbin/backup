#!/bin/bash
# backup -- backup the csb database
# $Id: backup,v 1.26 2006/06/26 18:05:08 rkh Exp $
#
# you must set PGPASSWORD before running
# this script any user with write permission in BACKUPDIR (below) should
# be able to run this script.
# 
# crontab invocation:
### MAILTO=me
### PATH=/path/to/pg/bin:/usr/bin:/usr/sbin:/bin
### PGPASSWORD=blahblahblah
### PGDATA=/services/postgresql
### HOME=/gne/compbio
### 
### #M  H  m  d  day        command
### 20  0  *  *  *          /services/csb-db/sbin/nightly
### 20  1  *  *  0,3        /services/csb-db/sbin/backup csb-dev
### 20  1  *  *  1,2,4,5    /services/csb-db/sbin/backup -s csb-dev


BACKUPDIR="$HOME/adm/backups"
PATH=/usr/bin:/bin
PGD_OPTS="-Upostgres"

source `dirname $0`/utils

PGD_SOPT=
case "$1" in
	-s) PGD_SOPT="-s"; shift;;
	--debug) TABLE="-t origin"; shift;;
esac

PGDATABASE=$1
if [ -z "$PGDATABASE" ]; then
	die "missing database argument; dying"
fi

case `hostname` in
    csb)
    	PGHOST=localhost;;
    *) 
    	PGHOST=csb;;
esac
export PGHOST


#DATE=`date +%Y-%m-%d-%H:%M`;
DATE=`date +%Y-%m/%Y-%m-%d-%H:%M`;
R="$BACKUPDIR/$PGDATABASE/$DATE.pgdump${PGD_SOPT}"
mkdir -p "`dirname $R`"


# after this point and until `trap' near end, all exits are unexpected
cleanup ()
  { logger "! exited abnormally (status=$?)"; }
trap cleanup EXIT

# do the backup
OPTS="$PGD_SOPT $PGD_OPTS $TABLE $PGDATABASE"
logger "starting backup (PGHOST=$PGHOST; OPTS=$OPTS)"
logger "logging to $R.err"
#(time -p pg_dump $OPTS | gzip -cq) >"$R".gz 2>"$R".err
(time -p pg_dump -Fc $OPTS) >"$R" 2>"$R".err
E="$?"
S=`perl -le 'printf( "%.2f", (-s $ARGV[0]) / 2**20)' "$R"`
logger "backup in $R ($S MB)"
logger "backup completed; status $E; time: `tr '\012' , <"$R".err`"


# reset signal trap to exit gracefully
trap '' EXIT
