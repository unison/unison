#!/usr/bin/env perl
# generate sql create user statements from passwd file

use strict;
use warnings;
use Getopt::Long qw(:config gnu_getopt);
use Data::Dumper;


my %opts =
  (
   groups => undef,
   min_uid => undef,
   min_default_uid => 1000,
   min_sysid => 1000,
  );

GetOptions(\%opts,
		   'groups|group|g=s@',				# string, for comma-sep lists
		   'min_uid|u=i'
		  )
  || die("usage\n");


my %wanted_logins;
if (@ARGV) {
  if ($opts{groups}) {
	die("can't specify group and logins\n");
  }
  %wanted_logins = map { $_=>1 } @ARGV;
  undef @ARGV;
}

my %wanted_groups;
if ($opts{groups}) {
  @{$opts{groups}} = map { split /,/ } @{$opts{groups}};
  %wanted_groups = map {$_=>1} @{$opts{groups}};
}

my %omit_logins = map {$_=>1} 
  qw(Bioinfo gx2000-1 compbio postgres pgsql maint Molbio);

printf(STDERR "# wanted_logins? %s (%s); wanted_groups? %s (%s)\n",
	   ( %wanted_logins ? ('Y',scalar keys %wanted_logins) : ('N','') ),
	   ( %wanted_groups ? ('Y',scalar keys %wanted_groups) : ('N','') )
	  );

while(<>) {
  my @F = split(/:/);
  next if (exists $omit_logins{$F[0]});
  next if (defined $opts{min_uid} and $F[2]<$opts{min_uid});
  if (    (%wanted_logins and exists $wanted_logins{$F[0]})
	   or (%wanted_groups and exists $wanted_groups{$F[3]})
	   or (not %wanted_groups and not %wanted_logins and $F[2]>=$opts{min_default_uid}) ) {
	$F[2] += 1000000  if $F[2] < $opts{min_sysid};	# avoid low-numbered uids
	printf("create user $F[0] with sysid $F[2] nocreatedb nocreateuser;\n");
	delete $wanted_logins{$F[0]};
  }
}


my @remaining = sort keys %wanted_logins;
if (@remaining) {
  die(sprintf("%d login(s) weren't found: {%s}\n",
			  $#remaining+1, join(',',@remaining)));
}
exit(0);
