-*-outline-*-

* NEXT RELEASE:

** standing order: update sequences, models, predictions

** pmap failed sequences
when pmap fails to map a sequence, no entry in run_history for sequences 
that have no entry in psl files. 
2007-02-02 Reece Hart <reece@harts.net> -- NEEDS VERIFICATION

** params selection per pseq_id
instead of selecting the most recent params by pftype_id, we should join
this with a pseq_id's run_history so that we don't select a params_id
which hasn't been run against.  Oops.

2007-02-02 Reece Hart <reece@harts.net> -- I think this is done, but we
should verify.

** drop insert rule on palias IF IT IS UNUSED
grep unison tree for any lingering uses of 'insert into palias...'





* IMPORTANT:

** documentation
need better documentation for installing and describing the code layout

** linking
URLs are stored in the origin table, but they're not used by the web
tools.  Solution: cache origin->url mapping, then use this to format. See
U::WWW::utilities.pm.

** best annotations
best annotation/alias is too human-centric.  For example, the pseq_id 54
is IL4_HUMAN and IL4_PANTR; the best annotation is IL4_HUMAN.  That's fine
if you're after human sequences, but misleading if you're after chimp.  I
think best annotation should be expanded to be the best annotation /by
species/, i.e., distinct on (pseq_id,tax_id) ... order by
pseq_id,tax_id,ann_pref, and remaining current order criteria.

The best_annotation_mv table should include all of these.

The best_* functions should be parameterized by species/tax_id, but permit
NULL tax_id columns as well (e.g., for sequences that have only NULL
tax_id aliases).

The current best_* functions should default to human OR become SRFs.

views and web pages will need to be updated to accommodate multi-species
best annotations.






* CONSIDER:

** sequence-sequence relationships
Currently, all sequences in pseq are equal.  In reality, sequences may be
usefully related by: 1) subsequences, 2) alternative splicing, 3)
paralogs, 4) orthologs, 5) homology (not 3 or 4), and probably others as
well.  Ex: given a good thread to pseq_id 333, how does one determine that
333 is really a sigcleave'd fragment of 222 (case 1 above). Subsume the
functionailty of pseq.ref_pseq_id into sequence-sequences relationships
and drop that column.

** running HMMer against custom HMMs 
Our current design for running HMMer is biased towards pfam. Issues that
need more thought are: should we create a new params_id for each HMM based
mining project?  how will origin_id be associated with params_id run-pahmm
should handle running aginst cutoms HMM's with above ids.

** adopt stricter policy for params_id and pmodelset_id
- unfortunately, params mixes several ideas: HOW to run a program, and
  WHAT models were run against by origin, and WHAT models were run against
  by modelset.
pseq_id: query
params_id: how run
pmodelset_id: what run against
pmodelset_id should be used to represent origins
run_id: consider adding as a shorthand for <params_id,pmodelset_id>
(eg run-pahmm -r 33)
run_history could/should use run_id... in lieu of alternatives?

ASSUMPTION: prediction results depend only on the triplet of
<pseq_id,params_id,pmodel_id>.  It does NOT depend on anything else such
as the identities or size of other models within a set.

Consider effects of these changes on:
- loading
- queries for results (eg select * from pahmm_v where params_id=x)
- indexes

** incremental updates of models and corresponding predictions
Requires adoption of params_id and pmodelset_id policy above.

Conisder:
- Models must now belong to multiple origins, but we don't currently have
  a schema that reflects this.  One possibiity is to archive this
  association in pmsm_pmhmm.  Otherwise, we'll need to explicitly version
  model origins as we do for aliases (ugh).

** changes to pmodelsets and origins are not tracked by run_history
Requires adoption of params_id and pmodelset_id policy above.

run_history refers to pmodelsets and origins. It is possible that the set
of models (pmodel_ids) implied by using either or both of these criteria
will change over time, thereby making run_history data incorrect. The
options are to make such sets immutable (not possible for origin), or
better, attach time stamps to pmodelset and origin rows, or to simply
remove run_history rows when a pmodelset or origin set is changed.





* BACKBURNER:

** paprospect loading is slow
paprospect2 loading is particularly slow; we should recast these as sql
delete and COPY statements, including run_history updates, all wrapped in
a transaction.

** pmodelsets are should be nested
It would be nice if subsets of models triggered an automatic update of
run_history for the pmodelset subsets. CAUTION: if deleting from a set is
permissible (as it is now), and if B is a subset of A, then deleting from
A may imply that B is no longer a subset of A. Therefore, deletion might
need to be restricted as well.

** svn migration

** pftypes, params, run_history
problems:
- some params map to multiple types (e.g., tmdetect). This happens
  whenever a program returns >1 type of feature (but multiple features of
  1 type is okay) 
- what's the right way to ask run_history whether (e.g.)
  Pfam has been run on a sequence. One solution is to have a modelset of
  Pfam models, but that's a deviation from the original intent of
  modelsets: to collect models related by function, not by model type.  

** standardize naming conventions better

** add current_user to pseq, palias tables?

** order in asset aggregate



* COMPLETED TASKS

** DONE: It's currently hard to tell which analyses have been run on some sequences.
  For analyses which may legitimately have no return value (e.g., tmdetect
  returns no S, N, or M region), it's impossible to distinguish sequences
  for which the analysis returned nothing from those which haven't yet been run.
** DONE: Pfam and BLAST evalues
Pfam and BLAST evalues depend on the number of models and on the database
size respectively.  Both programs allow a database size to be entered on
the command line; perhaps this should be part of the run params so that
evals are reproducible.  Scores are always reproducible.
** DONE: sequence insertion too slow
  pseq_si_pseq_id too slow... (len,md5) instead of (md5,len)?
  problem: md5 was indexed but not 'analyzed', so md5 lookups were sluggish
** DONE: `model' table 
  hmm, p2template, sbprofile (for structure-based p.), etc are all models
  they should inherit from a general models table which contains links
  to GO, etc.
  drag: migrate current p2template to inherited version of p2template 
** DONE: hmm, pfhmm tables 
  hmm and features based on hmms
** DONE: species 
  add tax table from NCBL (~rkh/tax/).  I'd like to see this as an
  ontology too, but I can't find any reference to such.  Propose to GO?
** DONE: pftype2pftype_id( ) lookup function 
** DONE: Gene Ontology
  link models and sequences to GO, with interpro2go, spkw2go
** DONE: p2thread -> pfp2thread
  rename for conformity (pfeatures have prefix pf)
** DONE: Unison::DBI should wrap DBI to use exceptions.
** DONE: load-fasta
  option to generate tax_id with alias from tagline
** DONE: standardize on timestamp WITHOUT timezone
  no issue, just for consistency
** DONE: w/o oids
  fix 4 tables made by cavs
** DONE: pseq.len: smallint -> int 
** DONE: s/p2/prospect2/
** DONE: origin_id() needs to be created ahead of *_dv
** DONE: affyannot
** DONE: unq,pro,dnaid import
** DONE: run-blat needed
include better heuristics re: which alignments to load (e.g.,
match_criteria Union top10)
** DONE: update_uni_psets
set pset_ids 1,2,3 iin pseqset
delete from pseqset where pset_id=3;
insert into pseqset select distinct 3,pseq_id from palias where tax_id=tax_id('Rat') ;
etc.

**DONE: separate csb-db/ and unison/.
split unison/ from csb-db/; move tax/, scop/, gong/ to unison/ 
unison/aux is the new home for 3rd-party schemas

**DONE: collect UNQ,DNA -> pseq_id mapping (via PRO, presumably)
SST sub-schema in unison

**DONE: drop ins,upd,del from all tables upon staging? how?
Kiran added make_schema_read_only functions

**DONE: API documentation is abysmal
It's not great, but there are now perldocs for (nearly) all module functions

**DONE: params_prospect2
Simplify inheritance and inherited triggers by folding this back into
params. If the Unison perl API really needs this (for options like
global_local), then we should create a view which shadows params and
augments with the params_prospect2 data. If not, then we can simply drop
params_prospect2. Either way, params needs to be the /single/ table with
the params_id primary key.

** DONE: deprecate aliases
Sequence aliases and identifiers may become obsolete between versions of a
database (e.g., Swiss-Prot:T13X_HUMAN became TR13B_HUMAN). Although this
isn't typically significant between two versions, the total accumulated
number of obsolete aliases is steadily growing.  The upside of this is
that historical names are preserved.  Possible solution: load-pseq should
provide an option which retires unused aliases. We need to consider the
case of multi-file loads (e.g., Geneseq) which might only load a subset in
any single run.

** DONE: HUGO/HUPO terms
http://www.gene.ucl.ac.uk/nomenclature/code/ftpaccess.html
http://www.gene.ucl.ac.uk/public-files/nomen/searchdata.txt

** DONE: "anonymous" sequences
When a sequence alias is reused for a new version of a sequence, it's
possible that the previous sequence no longer has a current alias and is
therefore unnamed. This is reality.  The current alias views will hide
that alias and give the impression that the sequence came from nowhere.
Do we care?
A: Not really, but there's now a view called orphaned_sequences_v.

** DONE: ** overriding inherited fields
pmpseq (others?) override inherited fields (specifically, origin_id and
acc are made not null) and therefore conflicts conceptually with the
parent and, more pragmatically, upon restore. We should strictly follow
inheritance of columns AND their attributes.

