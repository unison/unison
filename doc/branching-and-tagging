CVS CONVENTIONS AND TIPS FOR UNISON-WEB
---------------------------------------

The CVS tree follows a "basically unstable" methodology in which the trunk
is used for development and branches are used for feature development or
releases.

Release branches are used to maintain releases (x.y) and their patches
(x.y.z).  Except for bug and security fixes, no development should occur
in this branch.

Feature branches are intended to be short-lived, with the results either
abandoned or merged into the trunk.

Merging should always be from branches to the trunk, and never the other
way around. (I suspect there will be diabolical cases which need
exception.)

We should tag before every branch and after every merge. Tags and branch
tags should use the following format:

- RB_x_y: "Release Branch" (branch tag) in preparation for a new release
- BT_x_y: "Branch Tag" corresponding to files at root of RB_x_y
- RT_x_y_z: a patch release
- FB_name: "Feature Branch" (branch tag) in preparation for developing a new feature
- BT_name: "Feature Tag" corresponding to files at root of FB_name

- M_FB_name: Merge tag on the trunk to indicate that the named
	feature was merged. THIS BRANCH IS NOW CLOSED.
- M_RT_x_y_z: Merge tag on the trunk after merging RT_x_y_z into trunk
	This indicates that these fixes were merged into the trunk and can be used
	as a datum for merging a future RT.



COMMON OPERATIONS
WARNINGS: These need to be more carefully vetted. Use caution.

1. create a new relase branch
$ cvs up -A    # ensures you've got the most recent trunk
$ cvs tag BT_1_0
$ cvs tag -b RB_1_0
$ cvs up -r RB_1_0
We now have a tag (BT) on the files created just before a branch, 
and a branch with a corresponding name for release.

2. create a new release
$ cvs up -r RB_x_y
DO WE NEED $ cvs com -m 'prep for release' for uncommitted changes
$ cvs tag RT_x_y_z

3. merge release back into trunk
$ cd /tmp
$ cvs up unison-web
$ cvs up -j RT_x_y_z
$ cvs tag M_RT_x_y_z

4. create a new feature branch
