CVS CONVENTIONS AND TIPS
========================

These are CVS tips I've culled from the 'net and from The O'Reilly CVS
book.

Our CVS tree follows a "basically unstable" methodology in which the trunk
is used for development and branches are used for feature development or
releases.

Release branches are used to maintain releases (x.y) and their patches
(x.y.z).  Except for bug and security fixes, no development should occur
in this branch.

Feature branches are intended to be short-lived, with the results either
abandoned or merged into the trunk.

Merging should always be from branches to the trunk, and never the other
way around. (I suspect there will be diabolical cases which need
exception.)

We should tag before every branch and after every merge. Tags and branch
tags should use the following format:

- B_x-y_root: Branch Root tag just before creating a major-minor branch
- B_x-y: a major-minor release Branch
- BR_<feature>, B-<feature>: akin to the above but for named features
- REL_x-y-z: RELease of version x.y.z (on B-x_y, please!)
- M_REL_x-y-z: tag on br-x_y marking merge of x_y_z to root
- M-<feature>[-1,2,3,...]: tag on B-<feature>

COMMON OPERATIONS
WARNINGS: These need to be more carefully vetted. Use caution.

1. create a new relase branch
$ cvs up -A    # ensures you've got the most recent trunk
$ cvs tag br-0_0-root
$ cvs rtag -r br-0_0-root -b br-0_0
$ cvs up -r br-0_0
We now have a tag on the files created just before a branch, 
and a branch with a corresponding name for release.

2. create a new feature branch
like above, but use a meaningful feature name instead of the version

3. create a new release
$ cvs up -r br-0_0
(ensure your changes are committed)
$ cvs tag rel-0_0_0

4. merge branch (release or feature) into trunk
SEE: Essential CVS, p. 84, merging branch-to-trunk
$ cd /tmp
$ cvs up unison-web
$ cvs up -j REL-x_y_z
$ cvs com -m 'incorporated 
$ cvs tag M_RT_x_y_z

